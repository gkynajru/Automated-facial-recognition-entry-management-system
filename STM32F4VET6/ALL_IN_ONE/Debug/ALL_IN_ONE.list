
ALL_IN_ONE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008840  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080089d8  080089d8  000189d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a7c  08008a7c  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a7c  08008a7c  00018a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a84  08008a84  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a84  08008a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a88  08008a88  00018a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08008a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d08  2000010c  08008b98  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e14  08008b98  00021e14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000152d4  00000000  00000000  0002017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003523  00000000  00000000  00035453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  00038978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f17  00000000  00000000  00039d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000192a7  00000000  00000000  0003ac1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a4cb  00000000  00000000  00053ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091cac  00000000  00000000  0006e391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052d8  00000000  00000000  00100040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00105318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000010c 	.word	0x2000010c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080089c0 	.word	0x080089c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000110 	.word	0x20000110
 80001d4:	080089c0 	.word	0x080089c0

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <lcd_send_cmd>:
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	f023 030f 	bic.w	r3, r3, #15
 80004f8:	73fb      	strb	r3, [r7, #15]
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	011b      	lsls	r3, r3, #4
 80004fe:	73bb      	strb	r3, [r7, #14]
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	f043 030c 	orr.w	r3, r3, #12
 8000506:	b2db      	uxtb	r3, r3
 8000508:	723b      	strb	r3, [r7, #8]
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	f043 0308 	orr.w	r3, r3, #8
 8000510:	b2db      	uxtb	r3, r3
 8000512:	727b      	strb	r3, [r7, #9]
 8000514:	7bbb      	ldrb	r3, [r7, #14]
 8000516:	f043 030c 	orr.w	r3, r3, #12
 800051a:	b2db      	uxtb	r3, r3
 800051c:	72bb      	strb	r3, [r7, #10]
 800051e:	7bbb      	ldrb	r3, [r7, #14]
 8000520:	f043 0308 	orr.w	r3, r3, #8
 8000524:	b2db      	uxtb	r3, r3
 8000526:	72fb      	strb	r3, [r7, #11]
 8000528:	f107 0208 	add.w	r2, r7, #8
 800052c:	2364      	movs	r3, #100	; 0x64
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2304      	movs	r3, #4
 8000532:	214e      	movs	r1, #78	; 0x4e
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <lcd_send_cmd+0x5c>)
 8000536:	f001 f8a3 	bl	8001680 <HAL_I2C_Master_Transmit>
 800053a:	bf00      	nop
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000168 	.word	0x20000168

08000548 <lcd_send_data>:
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af02      	add	r7, sp, #8
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f023 030f 	bic.w	r3, r3, #15
 8000558:	73fb      	strb	r3, [r7, #15]
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	011b      	lsls	r3, r3, #4
 800055e:	73bb      	strb	r3, [r7, #14]
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	f043 030d 	orr.w	r3, r3, #13
 8000566:	b2db      	uxtb	r3, r3
 8000568:	723b      	strb	r3, [r7, #8]
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	f043 0309 	orr.w	r3, r3, #9
 8000570:	b2db      	uxtb	r3, r3
 8000572:	727b      	strb	r3, [r7, #9]
 8000574:	7bbb      	ldrb	r3, [r7, #14]
 8000576:	f043 030d 	orr.w	r3, r3, #13
 800057a:	b2db      	uxtb	r3, r3
 800057c:	72bb      	strb	r3, [r7, #10]
 800057e:	7bbb      	ldrb	r3, [r7, #14]
 8000580:	f043 0309 	orr.w	r3, r3, #9
 8000584:	b2db      	uxtb	r3, r3
 8000586:	72fb      	strb	r3, [r7, #11]
 8000588:	f107 0208 	add.w	r2, r7, #8
 800058c:	2364      	movs	r3, #100	; 0x64
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2304      	movs	r3, #4
 8000592:	214e      	movs	r1, #78	; 0x4e
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <lcd_send_data+0x5c>)
 8000596:	f001 f873 	bl	8001680 <HAL_I2C_Master_Transmit>
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000168 	.word	0x20000168

080005a8 <lcd_clear>:
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	2080      	movs	r0, #128	; 0x80
 80005b0:	f7ff ff9a 	bl	80004e8 <lcd_send_cmd>
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	e005      	b.n	80005c6 <lcd_clear+0x1e>
 80005ba:	2020      	movs	r0, #32
 80005bc:	f7ff ffc4 	bl	8000548 <lcd_send_data>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3301      	adds	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b45      	cmp	r3, #69	; 0x45
 80005ca:	ddf6      	ble.n	80005ba <lcd_clear+0x12>
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <lcd_put_cur>:
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d003      	beq.n	80005ee <lcd_put_cur+0x18>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d005      	beq.n	80005f8 <lcd_put_cur+0x22>
 80005ec:	e009      	b.n	8000602 <lcd_put_cur+0x2c>
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	e004      	b.n	8000602 <lcd_put_cur+0x2c>
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	bf00      	nop
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff6e 	bl	80004e8 <lcd_send_cmd>
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <lcd_init>:
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
 8000618:	2032      	movs	r0, #50	; 0x32
 800061a:	f000 fc19 	bl	8000e50 <HAL_Delay>
 800061e:	2030      	movs	r0, #48	; 0x30
 8000620:	f7ff ff62 	bl	80004e8 <lcd_send_cmd>
 8000624:	2005      	movs	r0, #5
 8000626:	f000 fc13 	bl	8000e50 <HAL_Delay>
 800062a:	2030      	movs	r0, #48	; 0x30
 800062c:	f7ff ff5c 	bl	80004e8 <lcd_send_cmd>
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fc0d 	bl	8000e50 <HAL_Delay>
 8000636:	2030      	movs	r0, #48	; 0x30
 8000638:	f7ff ff56 	bl	80004e8 <lcd_send_cmd>
 800063c:	200a      	movs	r0, #10
 800063e:	f000 fc07 	bl	8000e50 <HAL_Delay>
 8000642:	2020      	movs	r0, #32
 8000644:	f7ff ff50 	bl	80004e8 <lcd_send_cmd>
 8000648:	200a      	movs	r0, #10
 800064a:	f000 fc01 	bl	8000e50 <HAL_Delay>
 800064e:	2028      	movs	r0, #40	; 0x28
 8000650:	f7ff ff4a 	bl	80004e8 <lcd_send_cmd>
 8000654:	2001      	movs	r0, #1
 8000656:	f000 fbfb 	bl	8000e50 <HAL_Delay>
 800065a:	2008      	movs	r0, #8
 800065c:	f7ff ff44 	bl	80004e8 <lcd_send_cmd>
 8000660:	2001      	movs	r0, #1
 8000662:	f000 fbf5 	bl	8000e50 <HAL_Delay>
 8000666:	2001      	movs	r0, #1
 8000668:	f7ff ff3e 	bl	80004e8 <lcd_send_cmd>
 800066c:	2001      	movs	r0, #1
 800066e:	f000 fbef 	bl	8000e50 <HAL_Delay>
 8000672:	2001      	movs	r0, #1
 8000674:	f000 fbec 	bl	8000e50 <HAL_Delay>
 8000678:	2006      	movs	r0, #6
 800067a:	f7ff ff35 	bl	80004e8 <lcd_send_cmd>
 800067e:	2001      	movs	r0, #1
 8000680:	f000 fbe6 	bl	8000e50 <HAL_Delay>
 8000684:	200c      	movs	r0, #12
 8000686:	f7ff ff2f 	bl	80004e8 <lcd_send_cmd>
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}

0800068e <lcd_send_string>:
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	e006      	b.n	80006a6 <lcd_send_string+0x18>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	607a      	str	r2, [r7, #4]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff51 	bl	8000548 <lcd_send_data>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1f4      	bne.n	8000698 <lcd_send_string+0xa>
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <main>:
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	f000 fb55 	bl	8000d6c <HAL_Init>
 80006c2:	f000 f8a7 	bl	8000814 <SystemClock_Config>
 80006c6:	f000 f9b3 	bl	8000a30 <MX_GPIO_Init>
 80006ca:	f000 f90d 	bl	80008e8 <MX_I2C1_Init>
 80006ce:	f000 f939 	bl	8000944 <MX_TIM2_Init>
 80006d2:	f007 fc0f 	bl	8007ef4 <MX_USB_DEVICE_Init>
 80006d6:	2100      	movs	r1, #0
 80006d8:	4843      	ldr	r0, [pc, #268]	; (80007e8 <main+0x130>)
 80006da:	f003 fa81 	bl	8003be0 <HAL_TIM_PWM_Start>
 80006de:	f7ff ff99 	bl	8000614 <lcd_init>
 80006e2:	2100      	movs	r1, #0
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff ff76 	bl	80005d6 <lcd_put_cur>
 80006ea:	4840      	ldr	r0, [pc, #256]	; (80007ec <main+0x134>)
 80006ec:	f7ff ffcf 	bl	800068e <lcd_send_string>
 80006f0:	2100      	movs	r1, #0
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff ff6f 	bl	80005d6 <lcd_put_cur>
 80006f8:	483d      	ldr	r0, [pc, #244]	; (80007f0 <main+0x138>)
 80006fa:	f7ff ffc8 	bl	800068e <lcd_send_string>
 80006fe:	493d      	ldr	r1, [pc, #244]	; (80007f4 <main+0x13c>)
 8000700:	483d      	ldr	r0, [pc, #244]	; (80007f8 <main+0x140>)
 8000702:	f7ff fd69 	bl	80001d8 <strcmp>
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d127      	bne.n	800075e <main+0xa6>
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000714:	4839      	ldr	r0, [pc, #228]	; (80007fc <main+0x144>)
 8000716:	f000 fe55 	bl	80013c4 <HAL_GPIO_WritePin>
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000720:	4836      	ldr	r0, [pc, #216]	; (80007fc <main+0x144>)
 8000722:	f000 fe4f 	bl	80013c4 <HAL_GPIO_WritePin>
 8000726:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800072a:	f000 fb91 	bl	8000e50 <HAL_Delay>
 800072e:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <main+0x130>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	220f      	movs	r2, #15
 8000734:	635a      	str	r2, [r3, #52]	; 0x34
 8000736:	f7ff ff37 	bl	80005a8 <lcd_clear>
 800073a:	2103      	movs	r1, #3
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff ff4a 	bl	80005d6 <lcd_put_cur>
 8000742:	482f      	ldr	r0, [pc, #188]	; (8000800 <main+0x148>)
 8000744:	f7ff ffa3 	bl	800068e <lcd_send_string>
 8000748:	2100      	movs	r1, #0
 800074a:	2001      	movs	r0, #1
 800074c:	f7ff ff43 	bl	80005d6 <lcd_put_cur>
 8000750:	482c      	ldr	r0, [pc, #176]	; (8000804 <main+0x14c>)
 8000752:	f7ff ff9c 	bl	800068e <lcd_send_string>
 8000756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800075a:	f000 fb79 	bl	8000e50 <HAL_Delay>
 800075e:	4925      	ldr	r1, [pc, #148]	; (80007f4 <main+0x13c>)
 8000760:	4829      	ldr	r0, [pc, #164]	; (8000808 <main+0x150>)
 8000762:	f7ff fd39 	bl	80001d8 <strcmp>
 8000766:	6038      	str	r0, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1c7      	bne.n	80006fe <main+0x46>
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000774:	4821      	ldr	r0, [pc, #132]	; (80007fc <main+0x144>)
 8000776:	f000 fe25 	bl	80013c4 <HAL_GPIO_WritePin>
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000780:	481e      	ldr	r0, [pc, #120]	; (80007fc <main+0x144>)
 8000782:	f000 fe1f 	bl	80013c4 <HAL_GPIO_WritePin>
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <main+0x130>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	227d      	movs	r2, #125	; 0x7d
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
 800078e:	f7ff ff0b 	bl	80005a8 <lcd_clear>
 8000792:	2105      	movs	r1, #5
 8000794:	2000      	movs	r0, #0
 8000796:	f7ff ff1e 	bl	80005d6 <lcd_put_cur>
 800079a:	481c      	ldr	r0, [pc, #112]	; (800080c <main+0x154>)
 800079c:	f7ff ff77 	bl	800068e <lcd_send_string>
 80007a0:	2100      	movs	r1, #0
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff ff17 	bl	80005d6 <lcd_put_cur>
 80007a8:	4819      	ldr	r0, [pc, #100]	; (8000810 <main+0x158>)
 80007aa:	f7ff ff70 	bl	800068e <lcd_send_string>
 80007ae:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80007b2:	f000 fb4d 	bl	8000e50 <HAL_Delay>
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <main+0x130>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	220f      	movs	r2, #15
 80007bc:	635a      	str	r2, [r3, #52]	; 0x34
 80007be:	f7ff fef3 	bl	80005a8 <lcd_clear>
 80007c2:	2103      	movs	r1, #3
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff ff06 	bl	80005d6 <lcd_put_cur>
 80007ca:	480d      	ldr	r0, [pc, #52]	; (8000800 <main+0x148>)
 80007cc:	f7ff ff5f 	bl	800068e <lcd_send_string>
 80007d0:	2100      	movs	r1, #0
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff feff 	bl	80005d6 <lcd_put_cur>
 80007d8:	480a      	ldr	r0, [pc, #40]	; (8000804 <main+0x14c>)
 80007da:	f7ff ff58 	bl	800068e <lcd_send_string>
 80007de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e2:	f000 fb35 	bl	8000e50 <HAL_Delay>
 80007e6:	e78a      	b.n	80006fe <main+0x46>
 80007e8:	200001bc 	.word	0x200001bc
 80007ec:	080089d8 	.word	0x080089d8
 80007f0:	080089e0 	.word	0x080089e0
 80007f4:	20000128 	.word	0x20000128
 80007f8:	20000000 	.word	0x20000000
 80007fc:	40020c00 	.word	0x40020c00
 8000800:	080089e8 	.word	0x080089e8
 8000804:	080089f4 	.word	0x080089f4
 8000808:	20000008 	.word	0x20000008
 800080c:	08008a04 	.word	0x08008a04
 8000810:	08008a0c 	.word	0x08008a0c

08000814 <SystemClock_Config>:
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	; 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f008 f892 	bl	800894c <memset>
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <SystemClock_Config+0xcc>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a27      	ldr	r2, [pc, #156]	; (80008e0 <SystemClock_Config+0xcc>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <SystemClock_Config+0xcc>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <SystemClock_Config+0xd0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <SystemClock_Config+0xd0>)
 800085e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <SystemClock_Config+0xd0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
 8000874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
 800087a:	2302      	movs	r3, #2
 800087c:	63bb      	str	r3, [r7, #56]	; 0x38
 800087e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000884:	2308      	movs	r3, #8
 8000886:	643b      	str	r3, [r7, #64]	; 0x40
 8000888:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800088c:	647b      	str	r3, [r7, #68]	; 0x44
 800088e:	2304      	movs	r3, #4
 8000890:	64bb      	str	r3, [r7, #72]	; 0x48
 8000892:	2307      	movs	r3, #7
 8000894:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	4618      	mov	r0, r3
 800089c:	f002 fc74 	bl	8003188 <HAL_RCC_OscConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0x96>
 80008a6:	f000 f923 	bl	8000af0 <Error_Handler>
 80008aa:	230f      	movs	r3, #15
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	2302      	movs	r3, #2
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c0:	61fb      	str	r3, [r7, #28]
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2102      	movs	r1, #2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 fed5 	bl	8003678 <HAL_RCC_ClockConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xc4>
 80008d4:	f000 f90c 	bl	8000af0 <Error_Handler>
 80008d8:	bf00      	nop
 80008da:	3750      	adds	r7, #80	; 0x50
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40007000 	.word	0x40007000

080008e8 <MX_I2C1_Init>:
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_I2C1_Init+0x50>)
 80008ee:	4a13      	ldr	r2, [pc, #76]	; (800093c <MX_I2C1_Init+0x54>)
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_I2C1_Init+0x50>)
 80008f4:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_I2C1_Init+0x58>)
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_I2C1_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_I2C1_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_I2C1_Init+0x50>)
 8000906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800090a:	611a      	str	r2, [r3, #16]
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_I2C1_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_I2C1_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_I2C1_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_I2C1_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_I2C1_Init+0x50>)
 8000926:	f000 fd67 	bl	80013f8 <HAL_I2C_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_I2C1_Init+0x4c>
 8000930:	f000 f8de 	bl	8000af0 <Error_Handler>
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000168 	.word	0x20000168
 800093c:	40005400 	.word	0x40005400
 8000940:	000186a0 	.word	0x000186a0

08000944 <MX_TIM2_Init>:
 8000944:	b580      	push	{r7, lr}
 8000946:	b08e      	sub	sp, #56	; 0x38
 8000948:	af00      	add	r7, sp, #0
 800094a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
 8000970:	615a      	str	r2, [r3, #20]
 8000972:	619a      	str	r2, [r3, #24]
 8000974:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <MX_TIM2_Init+0xe8>)
 8000976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <MX_TIM2_Init+0xe8>)
 800097e:	f240 628f 	movw	r2, #1679	; 0x68f
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <MX_TIM2_Init+0xe8>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_TIM2_Init+0xe8>)
 800098c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_TIM2_Init+0xe8>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MX_TIM2_Init+0xe8>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
 800099e:	4823      	ldr	r0, [pc, #140]	; (8000a2c <MX_TIM2_Init+0xe8>)
 80009a0:	f003 f876 	bl	8003a90 <HAL_TIM_Base_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0x6a>
 80009aa:	f000 f8a1 	bl	8000af0 <Error_Handler>
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80009b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b8:	4619      	mov	r1, r3
 80009ba:	481c      	ldr	r0, [pc, #112]	; (8000a2c <MX_TIM2_Init+0xe8>)
 80009bc:	f003 fa82 	bl	8003ec4 <HAL_TIM_ConfigClockSource>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0x86>
 80009c6:	f000 f893 	bl	8000af0 <Error_Handler>
 80009ca:	4818      	ldr	r0, [pc, #96]	; (8000a2c <MX_TIM2_Init+0xe8>)
 80009cc:	f003 f8af 	bl	8003b2e <HAL_TIM_PWM_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM2_Init+0x96>
 80009d6:	f000 f88b 	bl	8000af0 <Error_Handler>
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	4619      	mov	r1, r3
 80009e8:	4810      	ldr	r0, [pc, #64]	; (8000a2c <MX_TIM2_Init+0xe8>)
 80009ea:	f003 fdff 	bl	80045ec <HAL_TIMEx_MasterConfigSynchronization>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM2_Init+0xb4>
 80009f4:	f000 f87c 	bl	8000af0 <Error_Handler>
 80009f8:	2360      	movs	r3, #96	; 0x60
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4807      	ldr	r0, [pc, #28]	; (8000a2c <MX_TIM2_Init+0xe8>)
 8000a10:	f003 f996 	bl	8003d40 <HAL_TIM_PWM_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM2_Init+0xda>
 8000a1a:	f000 f869 	bl	8000af0 <Error_Handler>
 8000a1e:	4803      	ldr	r0, [pc, #12]	; (8000a2c <MX_TIM2_Init+0xe8>)
 8000a20:	f000 f8fc 	bl	8000c1c <HAL_TIM_MspPostInit>
 8000a24:	bf00      	nop
 8000a26:	3738      	adds	r7, #56	; 0x38
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200001bc 	.word	0x200001bc

08000a30 <MX_GPIO_Init>:
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <MX_GPIO_Init+0xb8>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a26      	ldr	r2, [pc, #152]	; (8000ae8 <MX_GPIO_Init+0xb8>)
 8000a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <MX_GPIO_Init+0xb8>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <MX_GPIO_Init+0xb8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <MX_GPIO_Init+0xb8>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_GPIO_Init+0xb8>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_GPIO_Init+0xb8>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <MX_GPIO_Init+0xb8>)
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_GPIO_Init+0xb8>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_GPIO_Init+0xb8>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <MX_GPIO_Init+0xb8>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_GPIO_Init+0xb8>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <MX_GPIO_Init+0xbc>)
 8000abe:	f000 fc81 	bl	80013c4 <HAL_GPIO_WritePin>
 8000ac2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61bb      	str	r3, [r7, #24]
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	623b      	str	r3, [r7, #32]
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_GPIO_Init+0xbc>)
 8000adc:	f000 faee 	bl	80010bc <HAL_GPIO_Init>
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	; 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020c00 	.word	0x40020c00

08000af0 <Error_Handler>:
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
 8000af8:	e7fe      	b.n	8000af8 <Error_Handler+0x8>
	...

08000afc <HAL_MspInit>:
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_I2C_MspInit>:
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <HAL_I2C_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12b      	bne.n	8000bc6 <HAL_I2C_MspInit+0x7a>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	23c0      	movs	r3, #192	; 0xc0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	2312      	movs	r3, #18
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
 8000b96:	2303      	movs	r3, #3
 8000b98:	623b      	str	r3, [r7, #32]
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <HAL_I2C_MspInit+0x8c>)
 8000ba6:	f000 fa89 	bl	80010bc <HAL_GPIO_Init>
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	; 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <HAL_TIM_Base_MspInit>:
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bec:	d10d      	bne.n	8000c0a <HAL_TIM_Base_MspInit+0x2e>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_TIM_Base_MspInit+0x3c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_TIM_Base_MspInit+0x3c>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_TIM_Base_MspInit+0x3c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_TIM_MspPostInit>:
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c3c:	d11d      	bne.n	8000c7a <HAL_TIM_MspPostInit+0x5e>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_TIM_MspPostInit+0x68>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <HAL_TIM_MspPostInit+0x68>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_TIM_MspPostInit+0x68>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	2302      	movs	r3, #2
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <HAL_TIM_MspPostInit+0x6c>)
 8000c76:	f000 fa21 	bl	80010bc <HAL_GPIO_Init>
 8000c7a:	bf00      	nop
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <NMI_Handler>:
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	f000 f89a 	bl	8000e10 <HAL_IncTick>
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <OTG_FS_IRQHandler>:
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <OTG_FS_IRQHandler+0x10>)
 8000ce6:	f001 f922 	bl	8001f2e <HAL_PCD_IRQHandler>
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200016e8 	.word	0x200016e8

08000cf4 <SystemInit>:
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <SystemInit+0x20>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <SystemInit+0x20>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <Reset_Handler>:
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d50 <LoopFillZerobss+0x12>
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <LoopFillZerobss+0x16>)
 8000d1e:	490e      	ldr	r1, [pc, #56]	; (8000d58 <LoopFillZerobss+0x1a>)
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <LoopFillZerobss+0x1e>)
 8000d22:	2300      	movs	r3, #0
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:
 8000d26:	58d4      	ldr	r4, [r2, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:
 8000d2c:	18c4      	adds	r4, r0, r3
 8000d2e:	428c      	cmp	r4, r1
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
 8000d32:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <LoopFillZerobss+0x22>)
 8000d34:	4c0b      	ldr	r4, [pc, #44]	; (8000d64 <LoopFillZerobss+0x26>)
 8000d36:	2300      	movs	r3, #0
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:
 8000d3e:	42a2      	cmp	r2, r4
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>
 8000d42:	f7ff ffd7 	bl	8000cf4 <SystemInit>
 8000d46:	f007 fe09 	bl	800895c <__libc_init_array>
 8000d4a:	f7ff fcb5 	bl	80006b8 <main>
 8000d4e:	4770      	bx	lr
 8000d50:	20020000 	.word	0x20020000
 8000d54:	20000000 	.word	0x20000000
 8000d58:	2000010c 	.word	0x2000010c
 8000d5c:	08008a8c 	.word	0x08008a8c
 8000d60:	2000010c 	.word	0x2000010c
 8000d64:	20001e14 	.word	0x20001e14

08000d68 <ADC_IRQHandler>:
 8000d68:	e7fe      	b.n	8000d68 <ADC_IRQHandler>
	...

08000d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <HAL_Init+0x40>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_Init+0x40>)
 8000d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x40>)
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f94f 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 f808 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff feac 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023c00 	.word	0x40023c00

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x54>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x58>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f967 	bl	80010a2 <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f000 f92f 	bl	800104e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_InitTick+0x5c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000010 	.word	0x20000010
 8000e08:	20000018 	.word	0x20000018
 8000e0c:	20000014 	.word	0x20000014

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000018 	.word	0x20000018
 8000e34:	20000204 	.word	0x20000204

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000204 	.word	0x20000204

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff ffee 	bl	8000e38 <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d005      	beq.n	8000e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_Delay+0x44>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e76:	bf00      	nop
 8000e78:	f7ff ffde 	bl	8000e38 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d8f7      	bhi.n	8000e78 <HAL_Delay+0x28>
  {
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000018 	.word	0x20000018

08000e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	60d3      	str	r3, [r2, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	f003 0307 	and.w	r3, r3, #7
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	db0b      	blt.n	8000f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 021f 	and.w	r2, r3, #31
 8000f14:	4907      	ldr	r1, [pc, #28]	; (8000f34 <__NVIC_EnableIRQ+0x38>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	095b      	lsrs	r3, r3, #5
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100

08000f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	db0a      	blt.n	8000f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	490c      	ldr	r1, [pc, #48]	; (8000f84 <__NVIC_SetPriority+0x4c>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	0112      	lsls	r2, r2, #4
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f60:	e00a      	b.n	8000f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4908      	ldr	r1, [pc, #32]	; (8000f88 <__NVIC_SetPriority+0x50>)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	3b04      	subs	r3, #4
 8000f70:	0112      	lsls	r2, r2, #4
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	440b      	add	r3, r1
 8000f76:	761a      	strb	r2, [r3, #24]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000e100 	.word	0xe000e100
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f1c3 0307 	rsb	r3, r3, #7
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	bf28      	it	cs
 8000faa:	2304      	movcs	r3, #4
 8000fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d902      	bls.n	8000fbc <NVIC_EncodePriority+0x30>
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3b03      	subs	r3, #3
 8000fba:	e000      	b.n	8000fbe <NVIC_EncodePriority+0x32>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	43d9      	mvns	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	4313      	orrs	r3, r2
         );
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001004:	d301      	bcc.n	800100a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001006:	2301      	movs	r3, #1
 8001008:	e00f      	b.n	800102a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <SysTick_Config+0x40>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001012:	210f      	movs	r1, #15
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f7ff ff8e 	bl	8000f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <SysTick_Config+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <SysTick_Config+0x40>)
 8001024:	2207      	movs	r2, #7
 8001026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	e000e010 	.word	0xe000e010

08001038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff29 	bl	8000e98 <__NVIC_SetPriorityGrouping>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001060:	f7ff ff3e 	bl	8000ee0 <__NVIC_GetPriorityGrouping>
 8001064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6978      	ldr	r0, [r7, #20]
 800106c:	f7ff ff8e 	bl	8000f8c <NVIC_EncodePriority>
 8001070:	4602      	mov	r2, r0
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff5d 	bl	8000f38 <__NVIC_SetPriority>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff31 	bl	8000efc <__NVIC_EnableIRQ>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffa2 	bl	8000ff4 <SysTick_Config>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e159      	b.n	800138c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 8148 	bne.w	8001386 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d005      	beq.n	800110e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	2b02      	cmp	r3, #2
 800110c:	d130      	bne.n	8001170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 0201 	and.w	r2, r3, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b03      	cmp	r3, #3
 800117a:	d017      	beq.n	80011ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d123      	bne.n	8001200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	69b9      	ldr	r1, [r7, #24]
 80011fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0203 	and.w	r2, r3, #3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80a2 	beq.w	8001386 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b57      	ldr	r3, [pc, #348]	; (80013a4 <HAL_GPIO_Init+0x2e8>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a56      	ldr	r2, [pc, #344]	; (80013a4 <HAL_GPIO_Init+0x2e8>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b54      	ldr	r3, [pc, #336]	; (80013a4 <HAL_GPIO_Init+0x2e8>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125e:	4a52      	ldr	r2, [pc, #328]	; (80013a8 <HAL_GPIO_Init+0x2ec>)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a49      	ldr	r2, [pc, #292]	; (80013ac <HAL_GPIO_Init+0x2f0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d019      	beq.n	80012be <HAL_GPIO_Init+0x202>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a48      	ldr	r2, [pc, #288]	; (80013b0 <HAL_GPIO_Init+0x2f4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x1fe>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a47      	ldr	r2, [pc, #284]	; (80013b4 <HAL_GPIO_Init+0x2f8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x1fa>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a46      	ldr	r2, [pc, #280]	; (80013b8 <HAL_GPIO_Init+0x2fc>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x1f6>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a45      	ldr	r2, [pc, #276]	; (80013bc <HAL_GPIO_Init+0x300>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x1f2>
 80012aa:	2304      	movs	r3, #4
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012ae:	2307      	movs	r3, #7
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4935      	ldr	r1, [pc, #212]	; (80013a8 <HAL_GPIO_Init+0x2ec>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012de:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <HAL_GPIO_Init+0x304>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001302:	4a2f      	ldr	r2, [pc, #188]	; (80013c0 <HAL_GPIO_Init+0x304>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001308:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <HAL_GPIO_Init+0x304>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800132c:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <HAL_GPIO_Init+0x304>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <HAL_GPIO_Init+0x304>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001356:	4a1a      	ldr	r2, [pc, #104]	; (80013c0 <HAL_GPIO_Init+0x304>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_GPIO_Init+0x304>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001380:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <HAL_GPIO_Init+0x304>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f aea2 	bls.w	80010d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40013800 	.word	0x40013800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40013c00 	.word	0x40013c00

080013c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	041a      	lsls	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e12b      	b.n	8001662 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d106      	bne.n	8001424 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff fb94 	bl	8000b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2224      	movs	r2, #36	; 0x24
 8001428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0201 	bic.w	r2, r2, #1
 800143a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800144a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800145a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800145c:	f002 fb04 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 8001460:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4a81      	ldr	r2, [pc, #516]	; (800166c <HAL_I2C_Init+0x274>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d807      	bhi.n	800147c <HAL_I2C_Init+0x84>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4a80      	ldr	r2, [pc, #512]	; (8001670 <HAL_I2C_Init+0x278>)
 8001470:	4293      	cmp	r3, r2
 8001472:	bf94      	ite	ls
 8001474:	2301      	movls	r3, #1
 8001476:	2300      	movhi	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	e006      	b.n	800148a <HAL_I2C_Init+0x92>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4a7d      	ldr	r2, [pc, #500]	; (8001674 <HAL_I2C_Init+0x27c>)
 8001480:	4293      	cmp	r3, r2
 8001482:	bf94      	ite	ls
 8001484:	2301      	movls	r3, #1
 8001486:	2300      	movhi	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e0e7      	b.n	8001662 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4a78      	ldr	r2, [pc, #480]	; (8001678 <HAL_I2C_Init+0x280>)
 8001496:	fba2 2303 	umull	r2, r3, r2, r3
 800149a:	0c9b      	lsrs	r3, r3, #18
 800149c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4a6a      	ldr	r2, [pc, #424]	; (800166c <HAL_I2C_Init+0x274>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d802      	bhi.n	80014cc <HAL_I2C_Init+0xd4>
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	3301      	adds	r3, #1
 80014ca:	e009      	b.n	80014e0 <HAL_I2C_Init+0xe8>
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	4a69      	ldr	r2, [pc, #420]	; (800167c <HAL_I2C_Init+0x284>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	099b      	lsrs	r3, r3, #6
 80014de:	3301      	adds	r3, #1
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	430b      	orrs	r3, r1
 80014e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	495c      	ldr	r1, [pc, #368]	; (800166c <HAL_I2C_Init+0x274>)
 80014fc:	428b      	cmp	r3, r1
 80014fe:	d819      	bhi.n	8001534 <HAL_I2C_Init+0x13c>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	1e59      	subs	r1, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fbb1 f3f3 	udiv	r3, r1, r3
 800150e:	1c59      	adds	r1, r3, #1
 8001510:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001514:	400b      	ands	r3, r1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00a      	beq.n	8001530 <HAL_I2C_Init+0x138>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1e59      	subs	r1, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fbb1 f3f3 	udiv	r3, r1, r3
 8001528:	3301      	adds	r3, #1
 800152a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152e:	e051      	b.n	80015d4 <HAL_I2C_Init+0x1dc>
 8001530:	2304      	movs	r3, #4
 8001532:	e04f      	b.n	80015d4 <HAL_I2C_Init+0x1dc>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d111      	bne.n	8001560 <HAL_I2C_Init+0x168>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	1e58      	subs	r0, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	440b      	add	r3, r1
 800154a:	fbb0 f3f3 	udiv	r3, r0, r3
 800154e:	3301      	adds	r3, #1
 8001550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf0c      	ite	eq
 8001558:	2301      	moveq	r3, #1
 800155a:	2300      	movne	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	e012      	b.n	8001586 <HAL_I2C_Init+0x18e>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1e58      	subs	r0, r3, #1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6859      	ldr	r1, [r3, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	0099      	lsls	r1, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	fbb0 f3f3 	udiv	r3, r0, r3
 8001576:	3301      	adds	r3, #1
 8001578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf0c      	ite	eq
 8001580:	2301      	moveq	r3, #1
 8001582:	2300      	movne	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_I2C_Init+0x196>
 800158a:	2301      	movs	r3, #1
 800158c:	e022      	b.n	80015d4 <HAL_I2C_Init+0x1dc>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10e      	bne.n	80015b4 <HAL_I2C_Init+0x1bc>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1e58      	subs	r0, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6859      	ldr	r1, [r3, #4]
 800159e:	460b      	mov	r3, r1
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	440b      	add	r3, r1
 80015a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a8:	3301      	adds	r3, #1
 80015aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b2:	e00f      	b.n	80015d4 <HAL_I2C_Init+0x1dc>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1e58      	subs	r0, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	0099      	lsls	r1, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ca:	3301      	adds	r3, #1
 80015cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	6809      	ldr	r1, [r1, #0]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69da      	ldr	r2, [r3, #28]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001602:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6911      	ldr	r1, [r2, #16]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68d2      	ldr	r2, [r2, #12]
 800160e:	4311      	orrs	r1, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	430b      	orrs	r3, r1
 8001616:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2220      	movs	r2, #32
 800164e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	000186a0 	.word	0x000186a0
 8001670:	001e847f 	.word	0x001e847f
 8001674:	003d08ff 	.word	0x003d08ff
 8001678:	431bde83 	.word	0x431bde83
 800167c:	10624dd3 	.word	0x10624dd3

08001680 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af02      	add	r7, sp, #8
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	461a      	mov	r2, r3
 800168c:	460b      	mov	r3, r1
 800168e:	817b      	strh	r3, [r7, #10]
 8001690:	4613      	mov	r3, r2
 8001692:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001694:	f7ff fbd0 	bl	8000e38 <HAL_GetTick>
 8001698:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	f040 80e0 	bne.w	8001868 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2319      	movs	r3, #25
 80016ae:	2201      	movs	r2, #1
 80016b0:	4970      	ldr	r1, [pc, #448]	; (8001874 <HAL_I2C_Master_Transmit+0x1f4>)
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 f964 	bl	8001980 <I2C_WaitOnFlagUntilTimeout>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016be:	2302      	movs	r3, #2
 80016c0:	e0d3      	b.n	800186a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_I2C_Master_Transmit+0x50>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e0cc      	b.n	800186a <HAL_I2C_Master_Transmit+0x1ea>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d007      	beq.n	80016f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0201 	orr.w	r2, r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001704:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2221      	movs	r2, #33	; 0x21
 800170a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2210      	movs	r2, #16
 8001712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	893a      	ldrh	r2, [r7, #8]
 8001726:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172c:	b29a      	uxth	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4a50      	ldr	r2, [pc, #320]	; (8001878 <HAL_I2C_Master_Transmit+0x1f8>)
 8001736:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001738:	8979      	ldrh	r1, [r7, #10]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	6a3a      	ldr	r2, [r7, #32]
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 f89c 	bl	800187c <I2C_MasterRequestWrite>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e08d      	b.n	800186a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001764:	e066      	b.n	8001834 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	6a39      	ldr	r1, [r7, #32]
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 f9de 	bl	8001b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00d      	beq.n	8001792 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	2b04      	cmp	r3, #4
 800177c:	d107      	bne.n	800178e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800178c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e06b      	b.n	800186a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d11b      	bne.n	8001808 <HAL_I2C_Master_Transmit+0x188>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d017      	beq.n	8001808 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001800:	3b01      	subs	r3, #1
 8001802:	b29a      	uxth	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	6a39      	ldr	r1, [r7, #32]
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 f9ce 	bl	8001bae <I2C_WaitOnBTFFlagUntilTimeout>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00d      	beq.n	8001834 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	2b04      	cmp	r3, #4
 800181e:	d107      	bne.n	8001830 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800182e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e01a      	b.n	800186a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001838:	2b00      	cmp	r3, #0
 800183a:	d194      	bne.n	8001766 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800184a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2220      	movs	r2, #32
 8001850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	e000      	b.n	800186a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001868:	2302      	movs	r3, #2
  }
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	00100002 	.word	0x00100002
 8001878:	ffff0000 	.word	0xffff0000

0800187c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	460b      	mov	r3, r1
 800188a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2b08      	cmp	r3, #8
 8001896:	d006      	beq.n	80018a6 <I2C_MasterRequestWrite+0x2a>
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d003      	beq.n	80018a6 <I2C_MasterRequestWrite+0x2a>
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018a4:	d108      	bne.n	80018b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e00b      	b.n	80018d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	2b12      	cmp	r3, #18
 80018be:	d107      	bne.n	80018d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f84f 	bl	8001980 <I2C_WaitOnFlagUntilTimeout>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00d      	beq.n	8001904 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f6:	d103      	bne.n	8001900 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e035      	b.n	8001970 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800190c:	d108      	bne.n	8001920 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800190e:	897b      	ldrh	r3, [r7, #10]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800191c:	611a      	str	r2, [r3, #16]
 800191e:	e01b      	b.n	8001958 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001920:	897b      	ldrh	r3, [r7, #10]
 8001922:	11db      	asrs	r3, r3, #7
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f003 0306 	and.w	r3, r3, #6
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f063 030f 	orn	r3, r3, #15
 8001930:	b2da      	uxtb	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	490e      	ldr	r1, [pc, #56]	; (8001978 <I2C_MasterRequestWrite+0xfc>)
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 f875 	bl	8001a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e010      	b.n	8001970 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800194e:	897b      	ldrh	r3, [r7, #10]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <I2C_MasterRequestWrite+0x100>)
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f865 	bl	8001a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	00010008 	.word	0x00010008
 800197c:	00010002 	.word	0x00010002

08001980 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	4613      	mov	r3, r2
 800198e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001990:	e025      	b.n	80019de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d021      	beq.n	80019de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800199a:	f7ff fa4d 	bl	8000e38 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d302      	bcc.n	80019b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d116      	bne.n	80019de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2220      	movs	r2, #32
 80019ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f043 0220 	orr.w	r2, r3, #32
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e023      	b.n	8001a26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	0c1b      	lsrs	r3, r3, #16
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d10d      	bne.n	8001a04 <I2C_WaitOnFlagUntilTimeout+0x84>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4013      	ands	r3, r2
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	bf0c      	ite	eq
 80019fa:	2301      	moveq	r3, #1
 80019fc:	2300      	movne	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	e00c      	b.n	8001a1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d0b6      	beq.n	8001992 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a3c:	e051      	b.n	8001ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4c:	d123      	bne.n	8001a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2220      	movs	r2, #32
 8001a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f043 0204 	orr.w	r2, r3, #4
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e046      	b.n	8001b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9c:	d021      	beq.n	8001ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a9e:	f7ff f9cb 	bl	8000e38 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d302      	bcc.n	8001ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d116      	bne.n	8001ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2220      	movs	r2, #32
 8001abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f043 0220 	orr.w	r2, r3, #32
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e020      	b.n	8001b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d10c      	bne.n	8001b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4013      	ands	r3, r2
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bf14      	ite	ne
 8001afe:	2301      	movne	r3, #1
 8001b00:	2300      	moveq	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	e00b      	b.n	8001b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	4013      	ands	r3, r2
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf14      	ite	ne
 8001b18:	2301      	movne	r3, #1
 8001b1a:	2300      	moveq	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d18d      	bne.n	8001a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b38:	e02d      	b.n	8001b96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 f878 	bl	8001c30 <I2C_IsAcknowledgeFailed>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e02d      	b.n	8001ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d021      	beq.n	8001b96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b52:	f7ff f971 	bl	8000e38 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d302      	bcc.n	8001b68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d116      	bne.n	8001b96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2220      	movs	r2, #32
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f043 0220 	orr.w	r2, r3, #32
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e007      	b.n	8001ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba0:	2b80      	cmp	r3, #128	; 0x80
 8001ba2:	d1ca      	bne.n	8001b3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bba:	e02d      	b.n	8001c18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 f837 	bl	8001c30 <I2C_IsAcknowledgeFailed>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e02d      	b.n	8001c28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd2:	d021      	beq.n	8001c18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd4:	f7ff f930 	bl	8000e38 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d302      	bcc.n	8001bea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d116      	bne.n	8001c18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f043 0220 	orr.w	r2, r3, #32
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e007      	b.n	8001c28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d1ca      	bne.n	8001bbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c46:	d11b      	bne.n	8001c80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f043 0204 	orr.w	r2, r3, #4
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c90:	b08f      	sub	sp, #60	; 0x3c
 8001c92:	af0a      	add	r7, sp, #40	; 0x28
 8001c94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e10f      	b.n	8001ec0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f006 fb3c 	bl	8008338 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 fe07 	bl	80048f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	687e      	ldr	r6, [r7, #4]
 8001cec:	466d      	mov	r5, sp
 8001cee:	f106 0410 	add.w	r4, r6, #16
 8001cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d02:	1d33      	adds	r3, r6, #4
 8001d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d06:	6838      	ldr	r0, [r7, #0]
 8001d08:	f002 fcde 	bl	80046c8 <USB_CoreInit>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e0d0      	b.n	8001ec0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 fdf5 	bl	8004914 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
 8001d2e:	e04a      	b.n	8001dc6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	333d      	adds	r3, #61	; 0x3d
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	333c      	adds	r3, #60	; 0x3c
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	b298      	uxth	r0, r3
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	3344      	adds	r3, #68	; 0x44
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3340      	adds	r3, #64	; 0x40
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	3348      	adds	r3, #72	; 0x48
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	334c      	adds	r3, #76	; 0x4c
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	3354      	adds	r3, #84	; 0x54
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d3af      	bcc.n	8001d30 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e044      	b.n	8001e60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d3b5      	bcc.n	8001dd6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	687e      	ldr	r6, [r7, #4]
 8001e72:	466d      	mov	r5, sp
 8001e74:	f106 0410 	add.w	r4, r6, #16
 8001e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e84:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e88:	1d33      	adds	r3, r6, #4
 8001e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e8c:	6838      	ldr	r0, [r7, #0]
 8001e8e:	f002 fd8d 	bl	80049ac <USB_DevInit>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e00d      	b.n	8001ec0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 fedc 	bl	8005c76 <USB_DevDisconnect>

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ec8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_PCD_Start+0x1c>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e020      	b.n	8001f26 <HAL_PCD_Start+0x5e>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d109      	bne.n	8001f08 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d005      	beq.n	8001f08 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f002 fcdf 	bl	80048d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 fe8c 	bl	8005c34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f2e:	b590      	push	{r4, r7, lr}
 8001f30:	b08d      	sub	sp, #52	; 0x34
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 ff4a 	bl	8005dde <USB_GetMode>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f040 848a 	bne.w	8002866 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f003 feae 	bl	8005cb8 <USB_ReadInterrupts>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 8480 	beq.w	8002864 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fe9b 	bl	8005cb8 <USB_ReadInterrupts>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d107      	bne.n	8001f9c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f002 0202 	and.w	r2, r2, #2
 8001f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 fe89 	bl	8005cb8 <USB_ReadInterrupts>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b10      	cmp	r3, #16
 8001fae:	d161      	bne.n	8002074 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0210 	bic.w	r2, r2, #16
 8001fbe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	f003 020f 	and.w	r2, r3, #15
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	3304      	adds	r3, #4
 8001fde:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	0c5b      	lsrs	r3, r3, #17
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d124      	bne.n	8002036 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d035      	beq.n	8002064 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	6a38      	ldr	r0, [r7, #32]
 800200c:	f003 fcc0 	bl	8005990 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800201c:	441a      	add	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	6a1a      	ldr	r2, [r3, #32]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800202e:	441a      	add	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	621a      	str	r2, [r3, #32]
 8002034:	e016      	b.n	8002064 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	0c5b      	lsrs	r3, r3, #17
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	2b06      	cmp	r3, #6
 8002040:	d110      	bne.n	8002064 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002048:	2208      	movs	r2, #8
 800204a:	4619      	mov	r1, r3
 800204c:	6a38      	ldr	r0, [r7, #32]
 800204e:	f003 fc9f 	bl	8005990 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	6a1a      	ldr	r2, [r3, #32]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800205e:	441a      	add	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0210 	orr.w	r2, r2, #16
 8002072:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f003 fe1d 	bl	8005cb8 <USB_ReadInterrupts>
 800207e:	4603      	mov	r3, r0
 8002080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002084:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002088:	f040 80a7 	bne.w	80021da <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f003 fe22 	bl	8005cde <USB_ReadDevAllOutEpInterrupt>
 800209a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800209c:	e099      	b.n	80021d2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 808e 	beq.w	80021c6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 fe46 	bl	8005d46 <USB_ReadDevOutEPInterrupt>
 80020ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00c      	beq.n	80020e0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d2:	461a      	mov	r2, r3
 80020d4:	2301      	movs	r3, #1
 80020d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fec2 	bl	8002e64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00c      	beq.n	8002104 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f6:	461a      	mov	r2, r3
 80020f8:	2308      	movs	r3, #8
 80020fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 ff98 	bl	8003034 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	4413      	add	r3, r2
 8002116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211a:	461a      	mov	r2, r3
 800211c:	2310      	movs	r3, #16
 800211e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d030      	beq.n	800218c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	2b80      	cmp	r3, #128	; 0x80
 8002134:	d109      	bne.n	800214a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002144:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002148:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800214a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	3304      	adds	r3, #4
 800215e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	78db      	ldrb	r3, [r3, #3]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d108      	bne.n	800217a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2200      	movs	r2, #0
 800216c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f006 f9db 	bl	8008530 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002186:	461a      	mov	r2, r3
 8002188:	2302      	movs	r3, #2
 800218a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d008      	beq.n	80021a8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	4413      	add	r3, r2
 800219e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a2:	461a      	mov	r2, r3
 80021a4:	2320      	movs	r3, #32
 80021a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021be:	461a      	mov	r2, r3
 80021c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	3301      	adds	r3, #1
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	085b      	lsrs	r3, r3, #1
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f47f af62 	bne.w	800209e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 fd6a 	bl	8005cb8 <USB_ReadInterrupts>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021ee:	f040 80db 	bne.w	80023a8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f003 fd8b 	bl	8005d12 <USB_ReadDevAllInEpInterrupt>
 80021fc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002202:	e0cd      	b.n	80023a0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80c2 	beq.w	8002394 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f003 fdb1 	bl	8005d82 <USB_ReadDevInEPInterrupt>
 8002220:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d057      	beq.n	80022dc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	2201      	movs	r2, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	43db      	mvns	r3, r3
 8002246:	69f9      	ldr	r1, [r7, #28]
 8002248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800224c:	4013      	ands	r3, r2
 800224e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	4413      	add	r3, r2
 8002258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800225c:	461a      	mov	r2, r3
 800225e:	2301      	movs	r3, #1
 8002260:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d132      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	334c      	adds	r3, #76	; 0x4c
 800227a:	6819      	ldr	r1, [r3, #0]
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4403      	add	r3, r0
 800228a:	3348      	adds	r3, #72	; 0x48
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4419      	add	r1, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4403      	add	r3, r0
 800229e:	334c      	adds	r3, #76	; 0x4c
 80022a0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d113      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x3a2>
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	3354      	adds	r3, #84	; 0x54
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d108      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022c8:	461a      	mov	r2, r3
 80022ca:	2101      	movs	r1, #1
 80022cc:	f003 fdb8 	bl	8005e40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f006 f8af 	bl	800843a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022f2:	461a      	mov	r2, r3
 80022f4:	2308      	movs	r3, #8
 80022f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d008      	beq.n	8002314 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800230e:	461a      	mov	r2, r3
 8002310:	2310      	movs	r3, #16
 8002312:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800232a:	461a      	mov	r2, r3
 800232c:	2340      	movs	r3, #64	; 0x40
 800232e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d023      	beq.n	8002382 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800233a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800233c:	6a38      	ldr	r0, [r7, #32]
 800233e:	f002 fc99 	bl	8004c74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	3338      	adds	r3, #56	; 0x38
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	3304      	adds	r3, #4
 8002354:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	78db      	ldrb	r3, [r3, #3]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d108      	bne.n	8002370 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2200      	movs	r2, #0
 8002362:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4619      	mov	r1, r3
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f006 f8f2 	bl	8008554 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	4413      	add	r3, r2
 8002378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800237c:	461a      	mov	r2, r3
 800237e:	2302      	movs	r3, #2
 8002380:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800238c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fcdb 	bl	8002d4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	3301      	adds	r3, #1
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	085b      	lsrs	r3, r3, #1
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f47f af2e 	bne.w	8002204 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 fc83 	bl	8005cb8 <USB_ReadInterrupts>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023bc:	d122      	bne.n	8002404 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d108      	bne.n	80023ee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023e4:	2100      	movs	r1, #0
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fec2 	bl	8003170 <HAL_PCDEx_LPM_Callback>
 80023ec:	e002      	b.n	80023f4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f006 f890 	bl	8008514 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002402:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fc55 	bl	8005cb8 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002418:	d112      	bne.n	8002440 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d102      	bne.n	8002430 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f006 f84c 	bl	80084c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800243e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f003 fc37 	bl	8005cb8 <USB_ReadInterrupts>
 800244a:	4603      	mov	r3, r0
 800244c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002454:	f040 80b7 	bne.w	80025c6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2110      	movs	r1, #16
 8002472:	4618      	mov	r0, r3
 8002474:	f002 fbfe 	bl	8004c74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002478:	2300      	movs	r3, #0
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800247c:	e046      	b.n	800250c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4413      	add	r3, r2
 8002486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800248a:	461a      	mov	r2, r3
 800248c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002490:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	4413      	add	r3, r2
 800249a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a2:	0151      	lsls	r1, r2, #5
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	440a      	add	r2, r1
 80024a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024be:	461a      	mov	r2, r3
 80024c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d6:	0151      	lsls	r1, r2, #5
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	440a      	add	r2, r1
 80024dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f6:	0151      	lsls	r1, r2, #5
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	440a      	add	r2, r1
 80024fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002500:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002504:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	3301      	adds	r3, #1
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002512:	429a      	cmp	r2, r3
 8002514:	d3b3      	bcc.n	800247e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002524:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002528:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	2b00      	cmp	r3, #0
 8002530:	d016      	beq.n	8002560 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002542:	f043 030b 	orr.w	r3, r3, #11
 8002546:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002558:	f043 030b 	orr.w	r3, r3, #11
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	e015      	b.n	800258c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800256e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002572:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002576:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002586:	f043 030b 	orr.w	r3, r3, #11
 800258a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800259a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800259e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025b0:	461a      	mov	r2, r3
 80025b2:	f003 fc45 	bl	8005e40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 fb74 	bl	8005cb8 <USB_ReadInterrupts>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025da:	d124      	bne.n	8002626 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 fc0a 	bl	8005dfa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fbbf 	bl	8004d6e <USB_GetDevSpeed>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681c      	ldr	r4, [r3, #0]
 80025fc:	f001 fa28 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8002600:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002606:	b2db      	uxtb	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	4620      	mov	r0, r4
 800260c:	f002 f8be 	bl	800478c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f005 ff3a 	bl	800848a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002624:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f003 fb44 	bl	8005cb8 <USB_ReadInterrupts>
 8002630:	4603      	mov	r3, r0
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b08      	cmp	r3, #8
 8002638:	d10a      	bne.n	8002650 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f005 ff17 	bl	800846e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f002 0208 	and.w	r2, r2, #8
 800264e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f003 fb2f 	bl	8005cb8 <USB_ReadInterrupts>
 800265a:	4603      	mov	r3, r0
 800265c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002660:	2b80      	cmp	r3, #128	; 0x80
 8002662:	d122      	bne.n	80026aa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002670:	2301      	movs	r3, #1
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
 8002674:	e014      	b.n	80026a0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d105      	bne.n	800269a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	b2db      	uxtb	r3, r3
 8002692:	4619      	mov	r1, r3
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fb27 	bl	8002ce8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	3301      	adds	r3, #1
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d3e5      	bcc.n	8002676 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 fb02 	bl	8005cb8 <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026be:	d13b      	bne.n	8002738 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026c0:	2301      	movs	r3, #1
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
 80026c4:	e02b      	b.n	800271e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	3340      	adds	r3, #64	; 0x40
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d115      	bne.n	8002718 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80026ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	da12      	bge.n	8002718 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	333f      	adds	r3, #63	; 0x3f
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fae8 	bl	8002ce8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	3301      	adds	r3, #1
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	429a      	cmp	r2, r3
 8002726:	d3ce      	bcc.n	80026c6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002736:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f003 fabb 	bl	8005cb8 <USB_ReadInterrupts>
 8002742:	4603      	mov	r3, r0
 8002744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002748:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800274c:	d155      	bne.n	80027fa <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800274e:	2301      	movs	r3, #1
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
 8002752:	e045      	b.n	80027e0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d12e      	bne.n	80027da <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800277c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800277e:	2b00      	cmp	r3, #0
 8002780:	da2b      	bge.n	80027da <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800278e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002792:	429a      	cmp	r2, r3
 8002794:	d121      	bne.n	80027da <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d6:	6053      	str	r3, [r2, #4]
            break;
 80027d8:	e007      	b.n	80027ea <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	3301      	adds	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d3b4      	bcc.n	8002754 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 fa5a 	bl	8005cb8 <USB_ReadInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800280a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280e:	d10a      	bne.n	8002826 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f005 feb1 	bl	8008578 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f003 fa44 	bl	8005cb8 <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b04      	cmp	r3, #4
 8002838:	d115      	bne.n	8002866 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f005 fea1 	bl	8008594 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	e000      	b.n	8002866 <HAL_PCD_IRQHandler+0x938>
      return;
 8002864:	bf00      	nop
    }
  }
}
 8002866:	3734      	adds	r7, #52	; 0x34
 8002868:	46bd      	mov	sp, r7
 800286a:	bd90      	pop	{r4, r7, pc}

0800286c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_PCD_SetAddress+0x1a>
 8002882:	2302      	movs	r3, #2
 8002884:	e013      	b.n	80028ae <HAL_PCD_SetAddress+0x42>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 f9a2 	bl	8005be8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	4608      	mov	r0, r1
 80028c0:	4611      	mov	r1, r2
 80028c2:	461a      	mov	r2, r3
 80028c4:	4603      	mov	r3, r0
 80028c6:	70fb      	strb	r3, [r7, #3]
 80028c8:	460b      	mov	r3, r1
 80028ca:	803b      	strh	r3, [r7, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	da0f      	bge.n	80028fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 020f 	and.w	r2, r3, #15
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	3338      	adds	r3, #56	; 0x38
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	3304      	adds	r3, #4
 80028f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	705a      	strb	r2, [r3, #1]
 80028fa:	e00f      	b.n	800291c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	f003 020f 	and.w	r2, r3, #15
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	3304      	adds	r3, #4
 8002914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	b2da      	uxtb	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002928:	883a      	ldrh	r2, [r7, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	78ba      	ldrb	r2, [r7, #2]
 8002932:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	785b      	ldrb	r3, [r3, #1]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d004      	beq.n	8002946 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002946:	78bb      	ldrb	r3, [r7, #2]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d102      	bne.n	8002952 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_PCD_EP_Open+0xaa>
 800295c:	2302      	movs	r3, #2
 800295e:	e00e      	b.n	800297e <HAL_PCD_EP_Open+0xc8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68f9      	ldr	r1, [r7, #12]
 800296e:	4618      	mov	r0, r3
 8002970:	f002 fa22 	bl	8004db8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800297c:	7afb      	ldrb	r3, [r7, #11]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002996:	2b00      	cmp	r3, #0
 8002998:	da0f      	bge.n	80029ba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	f003 020f 	and.w	r2, r3, #15
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	3338      	adds	r3, #56	; 0x38
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	3304      	adds	r3, #4
 80029b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	705a      	strb	r2, [r3, #1]
 80029b8:	e00f      	b.n	80029da <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 020f 	and.w	r2, r3, #15
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	3304      	adds	r3, #4
 80029d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_PCD_EP_Close+0x6e>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e00e      	b.n	8002a12 <HAL_PCD_EP_Close+0x8c>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68f9      	ldr	r1, [r7, #12]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 fa60 	bl	8004ec8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b086      	sub	sp, #24
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	460b      	mov	r3, r1
 8002a28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a2a:	7afb      	ldrb	r3, [r7, #11]
 8002a2c:	f003 020f 	and.w	r2, r3, #15
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4413      	add	r3, r2
 8002a40:	3304      	adds	r3, #4
 8002a42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2200      	movs	r2, #0
 8002a54:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a5c:	7afb      	ldrb	r3, [r7, #11]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d102      	bne.n	8002a76 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a76:	7afb      	ldrb	r3, [r7, #11]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6979      	ldr	r1, [r7, #20]
 8002a8e:	f002 fd3f 	bl	8005510 <USB_EP0StartXfer>
 8002a92:	e008      	b.n	8002aa6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	6979      	ldr	r1, [r7, #20]
 8002aa2:	f002 faed 	bl	8005080 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	f003 020f 	and.w	r2, r3, #15
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	460b      	mov	r3, r1
 8002aee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002af0:	7afb      	ldrb	r3, [r7, #11]
 8002af2:	f003 020f 	and.w	r2, r3, #15
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	3338      	adds	r3, #56	; 0x38
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4413      	add	r3, r2
 8002b04:	3304      	adds	r3, #4
 8002b06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2200      	movs	r2, #0
 8002b18:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b20:	7afb      	ldrb	r3, [r7, #11]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d102      	bne.n	8002b3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d109      	bne.n	8002b58 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	6979      	ldr	r1, [r7, #20]
 8002b52:	f002 fcdd 	bl	8005510 <USB_EP0StartXfer>
 8002b56:	e008      	b.n	8002b6a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	6979      	ldr	r1, [r7, #20]
 8002b66:	f002 fa8b 	bl	8005080 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	f003 020f 	and.w	r2, r3, #15
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d901      	bls.n	8002b92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e050      	b.n	8002c34 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	da0f      	bge.n	8002bba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	f003 020f 	and.w	r2, r3, #15
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	3338      	adds	r3, #56	; 0x38
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	3304      	adds	r3, #4
 8002bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	705a      	strb	r2, [r3, #1]
 8002bb8:	e00d      	b.n	8002bd6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	4413      	add	r3, r2
 8002bcc:	3304      	adds	r3, #4
 8002bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_PCD_EP_SetStall+0x82>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e01e      	b.n	8002c34 <HAL_PCD_EP_SetStall+0xc0>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68f9      	ldr	r1, [r7, #12]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f002 ff1b 	bl	8005a40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	b2d9      	uxtb	r1, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c24:	461a      	mov	r2, r3
 8002c26:	f003 f90b 	bl	8005e40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	f003 020f 	and.w	r2, r3, #15
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d901      	bls.n	8002c5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e042      	b.n	8002ce0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	da0f      	bge.n	8002c82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	f003 020f 	and.w	r2, r3, #15
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	3338      	adds	r3, #56	; 0x38
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	3304      	adds	r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	705a      	strb	r2, [r3, #1]
 8002c80:	e00f      	b.n	8002ca2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	f003 020f 	and.w	r2, r3, #15
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	3304      	adds	r3, #4
 8002c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_PCD_EP_ClrStall+0x86>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e00e      	b.n	8002ce0 <HAL_PCD_EP_ClrStall+0xa4>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68f9      	ldr	r1, [r7, #12]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f002 ff23 	bl	8005b1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	da0c      	bge.n	8002d16 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	f003 020f 	and.w	r2, r3, #15
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	3338      	adds	r3, #56	; 0x38
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	4413      	add	r3, r2
 8002d10:	3304      	adds	r3, #4
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e00c      	b.n	8002d30 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68f9      	ldr	r1, [r7, #12]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f002 fd42 	bl	80057c0 <USB_EPStopXfer>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d40:	7afb      	ldrb	r3, [r7, #11]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b08a      	sub	sp, #40	; 0x28
 8002d4e:	af02      	add	r7, sp, #8
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	3338      	adds	r3, #56	; 0x38
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3304      	adds	r3, #4
 8002d70:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a1a      	ldr	r2, [r3, #32]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d901      	bls.n	8002d82 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e06c      	b.n	8002e5c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d902      	bls.n	8002d9e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3303      	adds	r3, #3
 8002da2:	089b      	lsrs	r3, r3, #2
 8002da4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002da6:	e02b      	b.n	8002e00 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	699a      	ldr	r2, [r3, #24]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d902      	bls.n	8002dc4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	3303      	adds	r3, #3
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6919      	ldr	r1, [r3, #16]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	4603      	mov	r3, r0
 8002de2:	6978      	ldr	r0, [r7, #20]
 8002de4:	f002 fd96 	bl	8005914 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	441a      	add	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a1a      	ldr	r2, [r3, #32]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	441a      	add	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d809      	bhi.n	8002e2a <PCD_WriteEmptyTxFifo+0xe0>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1a      	ldr	r2, [r3, #32]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d203      	bcs.n	8002e2a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1be      	bne.n	8002da8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d811      	bhi.n	8002e5a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	6939      	ldr	r1, [r7, #16]
 8002e52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e56:	4013      	ands	r3, r2
 8002e58:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3720      	adds	r7, #32
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	333c      	adds	r3, #60	; 0x3c
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d17b      	bne.n	8002f92 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d015      	beq.n	8002ed0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	4a61      	ldr	r2, [pc, #388]	; (800302c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	f240 80b9 	bls.w	8003020 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80b3 	beq.w	8003020 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ecc:	6093      	str	r3, [r2, #8]
 8002ece:	e0a7      	b.n	8003020 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2320      	movs	r3, #32
 8002eea:	6093      	str	r3, [r2, #8]
 8002eec:	e098      	b.n	8003020 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f040 8093 	bne.w	8003020 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	4a4b      	ldr	r2, [pc, #300]	; (800302c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d90f      	bls.n	8002f22 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f1e:	6093      	str	r3, [r2, #8]
 8002f20:	e07e      	b.n	8003020 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	3304      	adds	r3, #4
 8002f36:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	0159      	lsls	r1, r3, #5
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	440b      	add	r3, r1
 8002f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4e:	1ad2      	subs	r2, r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d114      	bne.n	8002f84 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2101      	movs	r1, #1
 8002f70:	f002 ff66 	bl	8005e40 <USB_EP0_OutStart>
 8002f74:	e006      	b.n	8002f84 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	441a      	add	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	4619      	mov	r1, r3
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f005 fa3a 	bl	8008404 <HAL_PCD_DataOutStageCallback>
 8002f90:	e046      	b.n	8003020 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	4a26      	ldr	r2, [pc, #152]	; (8003030 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d124      	bne.n	8002fe4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fb6:	6093      	str	r3, [r2, #8]
 8002fb8:	e032      	b.n	8003020 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	4619      	mov	r1, r3
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f005 fa11 	bl	8008404 <HAL_PCD_DataOutStageCallback>
 8002fe2:	e01d      	b.n	8003020 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d114      	bne.n	8003014 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d108      	bne.n	8003014 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800300c:	461a      	mov	r2, r3
 800300e:	2100      	movs	r1, #0
 8003010:	f002 ff16 	bl	8005e40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f005 f9f2 	bl	8008404 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	4f54300a 	.word	0x4f54300a
 8003030:	4f54310a 	.word	0x4f54310a

08003034 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	333c      	adds	r3, #60	; 0x3c
 800304c:	3304      	adds	r3, #4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4a15      	ldr	r2, [pc, #84]	; (80030bc <PCD_EP_OutSetupPacket_int+0x88>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d90e      	bls.n	8003088 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003070:	2b00      	cmp	r3, #0
 8003072:	d009      	beq.n	8003088 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003080:	461a      	mov	r2, r3
 8003082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003086:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f005 f9a9 	bl	80083e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <PCD_EP_OutSetupPacket_int+0x88>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d90c      	bls.n	80030b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d108      	bne.n	80030b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030a8:	461a      	mov	r2, r3
 80030aa:	2101      	movs	r1, #1
 80030ac:	f002 fec8 	bl	8005e40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	4f54300a 	.word	0x4f54300a

080030c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	70fb      	strb	r3, [r7, #3]
 80030cc:	4613      	mov	r3, r2
 80030ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d107      	bne.n	80030ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80030de:	883b      	ldrh	r3, [r7, #0]
 80030e0:	0419      	lsls	r1, r3, #16
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
 80030ec:	e028      	b.n	8003140 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	0c1b      	lsrs	r3, r3, #16
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	4413      	add	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	73fb      	strb	r3, [r7, #15]
 8003100:	e00d      	b.n	800311e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	3340      	adds	r3, #64	; 0x40
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	0c1b      	lsrs	r3, r3, #16
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	4413      	add	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	3301      	adds	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	3b01      	subs	r3, #1
 8003124:	429a      	cmp	r2, r3
 8003126:	d3ec      	bcc.n	8003102 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003128:	883b      	ldrh	r3, [r7, #0]
 800312a:	0418      	lsls	r0, r3, #16
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6819      	ldr	r1, [r3, #0]
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	3b01      	subs	r3, #1
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	4302      	orrs	r2, r0
 8003138:	3340      	adds	r3, #64	; 0x40
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e267      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d075      	beq.n	8003292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031a6:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d00c      	beq.n	80031cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b2:	4b85      	ldr	r3, [pc, #532]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d112      	bne.n	80031e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031be:	4b82      	ldr	r3, [pc, #520]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ca:	d10b      	bne.n	80031e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	4b7e      	ldr	r3, [pc, #504]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d05b      	beq.n	8003290 <HAL_RCC_OscConfig+0x108>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d157      	bne.n	8003290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e242      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d106      	bne.n	80031fc <HAL_RCC_OscConfig+0x74>
 80031ee:	4b76      	ldr	r3, [pc, #472]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a75      	ldr	r2, [pc, #468]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e01d      	b.n	8003238 <HAL_RCC_OscConfig+0xb0>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x98>
 8003206:	4b70      	ldr	r3, [pc, #448]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a6f      	ldr	r2, [pc, #444]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 800320c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b6d      	ldr	r3, [pc, #436]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a6c      	ldr	r2, [pc, #432]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0xb0>
 8003220:	4b69      	ldr	r3, [pc, #420]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a68      	ldr	r2, [pc, #416]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b66      	ldr	r3, [pc, #408]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a65      	ldr	r2, [pc, #404]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fd fdfa 	bl	8000e38 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003248:	f7fd fdf6 	bl	8000e38 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e207      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b5b      	ldr	r3, [pc, #364]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0xc0>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fd fde6 	bl	8000e38 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003270:	f7fd fde2 	bl	8000e38 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1f3      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0xe8>
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d063      	beq.n	8003366 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800329e:	4b4a      	ldr	r3, [pc, #296]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032aa:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d11c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b6:	4b44      	ldr	r3, [pc, #272]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d116      	bne.n	80032f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c2:	4b41      	ldr	r3, [pc, #260]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_RCC_OscConfig+0x152>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e1c7      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032da:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4937      	ldr	r1, [pc, #220]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	e03a      	b.n	8003366 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f8:	4b34      	ldr	r3, [pc, #208]	; (80033cc <HAL_RCC_OscConfig+0x244>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fd fd9b 	bl	8000e38 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003306:	f7fd fd97 	bl	8000e38 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e1a8      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003318:	4b2b      	ldr	r3, [pc, #172]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003324:	4b28      	ldr	r3, [pc, #160]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4925      	ldr	r1, [pc, #148]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
 8003338:	e015      	b.n	8003366 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_RCC_OscConfig+0x244>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fd fd7a 	bl	8000e38 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003348:	f7fd fd76 	bl	8000e38 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e187      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335a:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d036      	beq.n	80033e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d016      	beq.n	80033a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337a:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <HAL_RCC_OscConfig+0x248>)
 800337c:	2201      	movs	r2, #1
 800337e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fd fd5a 	bl	8000e38 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003388:	f7fd fd56 	bl	8000e38 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e167      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_OscConfig+0x240>)
 800339c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x200>
 80033a6:	e01b      	b.n	80033e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_OscConfig+0x248>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fd fd43 	bl	8000e38 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b4:	e00e      	b.n	80033d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b6:	f7fd fd3f 	bl	8000e38 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d907      	bls.n	80033d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e150      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
 80033c8:	40023800 	.word	0x40023800
 80033cc:	42470000 	.word	0x42470000
 80033d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d4:	4b88      	ldr	r3, [pc, #544]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 80033d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ea      	bne.n	80033b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8097 	beq.w	800351c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f2:	4b81      	ldr	r3, [pc, #516]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10f      	bne.n	800341e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	4b7d      	ldr	r3, [pc, #500]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4a7c      	ldr	r2, [pc, #496]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	6413      	str	r3, [r2, #64]	; 0x40
 800340e:	4b7a      	ldr	r3, [pc, #488]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341a:	2301      	movs	r3, #1
 800341c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	4b77      	ldr	r3, [pc, #476]	; (80035fc <HAL_RCC_OscConfig+0x474>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d118      	bne.n	800345c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342a:	4b74      	ldr	r3, [pc, #464]	; (80035fc <HAL_RCC_OscConfig+0x474>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a73      	ldr	r2, [pc, #460]	; (80035fc <HAL_RCC_OscConfig+0x474>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003436:	f7fd fcff 	bl	8000e38 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343e:	f7fd fcfb 	bl	8000e38 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e10c      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003450:	4b6a      	ldr	r3, [pc, #424]	; (80035fc <HAL_RCC_OscConfig+0x474>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d106      	bne.n	8003472 <HAL_RCC_OscConfig+0x2ea>
 8003464:	4b64      	ldr	r3, [pc, #400]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	4a63      	ldr	r2, [pc, #396]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6713      	str	r3, [r2, #112]	; 0x70
 8003470:	e01c      	b.n	80034ac <HAL_RCC_OscConfig+0x324>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b05      	cmp	r3, #5
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0x30c>
 800347a:	4b5f      	ldr	r3, [pc, #380]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a5e      	ldr	r2, [pc, #376]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003480:	f043 0304 	orr.w	r3, r3, #4
 8003484:	6713      	str	r3, [r2, #112]	; 0x70
 8003486:	4b5c      	ldr	r3, [pc, #368]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	4a5b      	ldr	r2, [pc, #364]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6713      	str	r3, [r2, #112]	; 0x70
 8003492:	e00b      	b.n	80034ac <HAL_RCC_OscConfig+0x324>
 8003494:	4b58      	ldr	r3, [pc, #352]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	4a57      	ldr	r2, [pc, #348]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	6713      	str	r3, [r2, #112]	; 0x70
 80034a0:	4b55      	ldr	r3, [pc, #340]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4a54      	ldr	r2, [pc, #336]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 80034a6:	f023 0304 	bic.w	r3, r3, #4
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d015      	beq.n	80034e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fd fcc0 	bl	8000e38 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7fd fcbc 	bl	8000e38 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e0cb      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d2:	4b49      	ldr	r3, [pc, #292]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0ee      	beq.n	80034bc <HAL_RCC_OscConfig+0x334>
 80034de:	e014      	b.n	800350a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e0:	f7fd fcaa 	bl	8000e38 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7fd fca6 	bl	8000e38 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e0b5      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fe:	4b3e      	ldr	r3, [pc, #248]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1ee      	bne.n	80034e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350a:	7dfb      	ldrb	r3, [r7, #23]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d105      	bne.n	800351c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003510:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	4a38      	ldr	r2, [pc, #224]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80a1 	beq.w	8003668 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003526:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b08      	cmp	r3, #8
 8003530:	d05c      	beq.n	80035ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d141      	bne.n	80035be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353a:	4b31      	ldr	r3, [pc, #196]	; (8003600 <HAL_RCC_OscConfig+0x478>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fd fc7a 	bl	8000e38 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003548:	f7fd fc76 	bl	8000e38 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e087      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355a:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	019b      	lsls	r3, r3, #6
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	3b01      	subs	r3, #1
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	491b      	ldr	r1, [pc, #108]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_RCC_OscConfig+0x478>)
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fd fc4f 	bl	8000e38 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359e:	f7fd fc4b 	bl	8000e38 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e05c      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x416>
 80035bc:	e054      	b.n	8003668 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035be:	4b10      	ldr	r3, [pc, #64]	; (8003600 <HAL_RCC_OscConfig+0x478>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fd fc38 	bl	8000e38 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fd fc34 	bl	8000e38 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e045      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_RCC_OscConfig+0x470>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x444>
 80035ea:	e03d      	b.n	8003668 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e038      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40007000 	.word	0x40007000
 8003600:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003604:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x4ec>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d028      	beq.n	8003664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d121      	bne.n	8003664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	429a      	cmp	r2, r3
 800362c:	d11a      	bne.n	8003664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003634:	4013      	ands	r3, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800363a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800363c:	4293      	cmp	r3, r2
 800363e:	d111      	bne.n	8003664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	085b      	lsrs	r3, r3, #1
 800364c:	3b01      	subs	r3, #1
 800364e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d107      	bne.n	8003664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800

08003678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0cc      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800368c:	4b68      	ldr	r3, [pc, #416]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d90c      	bls.n	80036b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b65      	ldr	r3, [pc, #404]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b63      	ldr	r3, [pc, #396]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0b8      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d020      	beq.n	8003702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036cc:	4b59      	ldr	r3, [pc, #356]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4a58      	ldr	r2, [pc, #352]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e4:	4b53      	ldr	r3, [pc, #332]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4a52      	ldr	r2, [pc, #328]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f0:	4b50      	ldr	r3, [pc, #320]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	494d      	ldr	r1, [pc, #308]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d044      	beq.n	8003798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d107      	bne.n	8003726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b47      	ldr	r3, [pc, #284]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d119      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e07f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d003      	beq.n	8003736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003732:	2b03      	cmp	r3, #3
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003736:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e06f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003746:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e067      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003756:	4b37      	ldr	r3, [pc, #220]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f023 0203 	bic.w	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4934      	ldr	r1, [pc, #208]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003768:	f7fd fb66 	bl	8000e38 <HAL_GetTick>
 800376c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376e:	e00a      	b.n	8003786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003770:	f7fd fb62 	bl	8000e38 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	; 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e04f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	4b2b      	ldr	r3, [pc, #172]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 020c 	and.w	r2, r3, #12
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	429a      	cmp	r2, r3
 8003796:	d1eb      	bne.n	8003770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003798:	4b25      	ldr	r3, [pc, #148]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d20c      	bcs.n	80037c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b22      	ldr	r3, [pc, #136]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e032      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4916      	ldr	r1, [pc, #88]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ea:	4b12      	ldr	r3, [pc, #72]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	490e      	ldr	r1, [pc, #56]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037fe:	f000 f821 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 8003802:	4602      	mov	r2, r0
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	490a      	ldr	r1, [pc, #40]	; (8003838 <HAL_RCC_ClockConfig+0x1c0>)
 8003810:	5ccb      	ldrb	r3, [r1, r3]
 8003812:	fa22 f303 	lsr.w	r3, r2, r3
 8003816:	4a09      	ldr	r2, [pc, #36]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800381a:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd fac6 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40023c00 	.word	0x40023c00
 8003834:	40023800 	.word	0x40023800
 8003838:	08008a64 	.word	0x08008a64
 800383c:	20000010 	.word	0x20000010
 8003840:	20000014 	.word	0x20000014

08003844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003848:	b094      	sub	sp, #80	; 0x50
 800384a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	647b      	str	r3, [r7, #68]	; 0x44
 8003850:	2300      	movs	r3, #0
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003854:	2300      	movs	r3, #0
 8003856:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800385c:	4b79      	ldr	r3, [pc, #484]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x200>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	d00d      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x40>
 8003868:	2b08      	cmp	r3, #8
 800386a:	f200 80e1 	bhi.w	8003a30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0x34>
 8003872:	2b04      	cmp	r3, #4
 8003874:	d003      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0x3a>
 8003876:	e0db      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b73      	ldr	r3, [pc, #460]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x204>)
 800387a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800387c:	e0db      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800387e:	4b73      	ldr	r3, [pc, #460]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x208>)
 8003880:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003882:	e0d8      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003884:	4b6f      	ldr	r3, [pc, #444]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800388c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800388e:	4b6d      	ldr	r3, [pc, #436]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d063      	beq.n	8003962 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389a:	4b6a      	ldr	r3, [pc, #424]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x200>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	099b      	lsrs	r3, r3, #6
 80038a0:	2200      	movs	r2, #0
 80038a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80038a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ac:	633b      	str	r3, [r7, #48]	; 0x30
 80038ae:	2300      	movs	r3, #0
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
 80038b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038b6:	4622      	mov	r2, r4
 80038b8:	462b      	mov	r3, r5
 80038ba:	f04f 0000 	mov.w	r0, #0
 80038be:	f04f 0100 	mov.w	r1, #0
 80038c2:	0159      	lsls	r1, r3, #5
 80038c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c8:	0150      	lsls	r0, r2, #5
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4621      	mov	r1, r4
 80038d0:	1a51      	subs	r1, r2, r1
 80038d2:	6139      	str	r1, [r7, #16]
 80038d4:	4629      	mov	r1, r5
 80038d6:	eb63 0301 	sbc.w	r3, r3, r1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038e8:	4659      	mov	r1, fp
 80038ea:	018b      	lsls	r3, r1, #6
 80038ec:	4651      	mov	r1, sl
 80038ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038f2:	4651      	mov	r1, sl
 80038f4:	018a      	lsls	r2, r1, #6
 80038f6:	4651      	mov	r1, sl
 80038f8:	ebb2 0801 	subs.w	r8, r2, r1
 80038fc:	4659      	mov	r1, fp
 80038fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800390e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003916:	4690      	mov	r8, r2
 8003918:	4699      	mov	r9, r3
 800391a:	4623      	mov	r3, r4
 800391c:	eb18 0303 	adds.w	r3, r8, r3
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	462b      	mov	r3, r5
 8003924:	eb49 0303 	adc.w	r3, r9, r3
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003936:	4629      	mov	r1, r5
 8003938:	024b      	lsls	r3, r1, #9
 800393a:	4621      	mov	r1, r4
 800393c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003940:	4621      	mov	r1, r4
 8003942:	024a      	lsls	r2, r1, #9
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800394a:	2200      	movs	r2, #0
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
 800394e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003950:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003954:	f7fc fc4a 	bl	80001ec <__aeabi_uldivmod>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4613      	mov	r3, r2
 800395e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003960:	e058      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003962:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	099b      	lsrs	r3, r3, #6
 8003968:	2200      	movs	r2, #0
 800396a:	4618      	mov	r0, r3
 800396c:	4611      	mov	r1, r2
 800396e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003972:	623b      	str	r3, [r7, #32]
 8003974:	2300      	movs	r3, #0
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
 8003978:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800397c:	4642      	mov	r2, r8
 800397e:	464b      	mov	r3, r9
 8003980:	f04f 0000 	mov.w	r0, #0
 8003984:	f04f 0100 	mov.w	r1, #0
 8003988:	0159      	lsls	r1, r3, #5
 800398a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800398e:	0150      	lsls	r0, r2, #5
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4641      	mov	r1, r8
 8003996:	ebb2 0a01 	subs.w	sl, r2, r1
 800399a:	4649      	mov	r1, r9
 800399c:	eb63 0b01 	sbc.w	fp, r3, r1
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039b4:	ebb2 040a 	subs.w	r4, r2, sl
 80039b8:	eb63 050b 	sbc.w	r5, r3, fp
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	00eb      	lsls	r3, r5, #3
 80039c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ca:	00e2      	lsls	r2, r4, #3
 80039cc:	4614      	mov	r4, r2
 80039ce:	461d      	mov	r5, r3
 80039d0:	4643      	mov	r3, r8
 80039d2:	18e3      	adds	r3, r4, r3
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	464b      	mov	r3, r9
 80039d8:	eb45 0303 	adc.w	r3, r5, r3
 80039dc:	607b      	str	r3, [r7, #4]
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ea:	4629      	mov	r1, r5
 80039ec:	028b      	lsls	r3, r1, #10
 80039ee:	4621      	mov	r1, r4
 80039f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039f4:	4621      	mov	r1, r4
 80039f6:	028a      	lsls	r2, r1, #10
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039fe:	2200      	movs	r2, #0
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	61fa      	str	r2, [r7, #28]
 8003a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a08:	f7fc fbf0 	bl	80001ec <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4613      	mov	r3, r2
 8003a12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a2e:	e002      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3750      	adds	r7, #80	; 0x50
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800
 8003a48:	00f42400 	.word	0x00f42400
 8003a4c:	007a1200 	.word	0x007a1200

08003a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000010 	.word	0x20000010

08003a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a6c:	f7ff fff0 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	0a9b      	lsrs	r3, r3, #10
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4903      	ldr	r1, [pc, #12]	; (8003a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	08008a74 	.word	0x08008a74

08003a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e041      	b.n	8003b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd f890 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f000 fac0 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e041      	b.n	8003bc4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d106      	bne.n	8003b5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f839 	bl	8003bcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	f000 fa71 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_TIM_PWM_Start+0x24>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	e022      	b.n	8003c4a <HAL_TIM_PWM_Start+0x6a>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d109      	bne.n	8003c1e <HAL_TIM_PWM_Start+0x3e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	bf14      	ite	ne
 8003c16:	2301      	movne	r3, #1
 8003c18:	2300      	moveq	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	e015      	b.n	8003c4a <HAL_TIM_PWM_Start+0x6a>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d109      	bne.n	8003c38 <HAL_TIM_PWM_Start+0x58>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	bf14      	ite	ne
 8003c30:	2301      	movne	r3, #1
 8003c32:	2300      	moveq	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e008      	b.n	8003c4a <HAL_TIM_PWM_Start+0x6a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e068      	b.n	8003d24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_PWM_Start+0x82>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c60:	e013      	b.n	8003c8a <HAL_TIM_PWM_Start+0xaa>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start+0x92>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c70:	e00b      	b.n	8003c8a <HAL_TIM_PWM_Start+0xaa>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_PWM_Start+0xa2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c80:	e003      	b.n	8003c8a <HAL_TIM_PWM_Start+0xaa>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	6839      	ldr	r1, [r7, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fc84 	bl	80045a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a23      	ldr	r2, [pc, #140]	; (8003d2c <HAL_TIM_PWM_Start+0x14c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d107      	bne.n	8003cb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <HAL_TIM_PWM_Start+0x14c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d018      	beq.n	8003cee <HAL_TIM_PWM_Start+0x10e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc4:	d013      	beq.n	8003cee <HAL_TIM_PWM_Start+0x10e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a19      	ldr	r2, [pc, #100]	; (8003d30 <HAL_TIM_PWM_Start+0x150>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <HAL_TIM_PWM_Start+0x10e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a17      	ldr	r2, [pc, #92]	; (8003d34 <HAL_TIM_PWM_Start+0x154>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d009      	beq.n	8003cee <HAL_TIM_PWM_Start+0x10e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a16      	ldr	r2, [pc, #88]	; (8003d38 <HAL_TIM_PWM_Start+0x158>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_TIM_PWM_Start+0x10e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <HAL_TIM_PWM_Start+0x15c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d111      	bne.n	8003d12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d010      	beq.n	8003d22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d10:	e007      	b.n	8003d22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800
 8003d38:	40000c00 	.word	0x40000c00
 8003d3c:	40014000 	.word	0x40014000

08003d40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e0ae      	b.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b0c      	cmp	r3, #12
 8003d6a:	f200 809f 	bhi.w	8003eac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d6e:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003da9 	.word	0x08003da9
 8003d78:	08003ead 	.word	0x08003ead
 8003d7c:	08003ead 	.word	0x08003ead
 8003d80:	08003ead 	.word	0x08003ead
 8003d84:	08003de9 	.word	0x08003de9
 8003d88:	08003ead 	.word	0x08003ead
 8003d8c:	08003ead 	.word	0x08003ead
 8003d90:	08003ead 	.word	0x08003ead
 8003d94:	08003e2b 	.word	0x08003e2b
 8003d98:	08003ead 	.word	0x08003ead
 8003d9c:	08003ead 	.word	0x08003ead
 8003da0:	08003ead 	.word	0x08003ead
 8003da4:	08003e6b 	.word	0x08003e6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f9d0 	bl	8004154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0208 	orr.w	r2, r2, #8
 8003dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0204 	bic.w	r2, r2, #4
 8003dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6999      	ldr	r1, [r3, #24]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	619a      	str	r2, [r3, #24]
      break;
 8003de6:	e064      	b.n	8003eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fa16 	bl	8004220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6999      	ldr	r1, [r3, #24]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	021a      	lsls	r2, r3, #8
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	619a      	str	r2, [r3, #24]
      break;
 8003e28:	e043      	b.n	8003eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fa61 	bl	80042f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69da      	ldr	r2, [r3, #28]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0208 	orr.w	r2, r2, #8
 8003e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0204 	bic.w	r2, r2, #4
 8003e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69d9      	ldr	r1, [r3, #28]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	61da      	str	r2, [r3, #28]
      break;
 8003e68:	e023      	b.n	8003eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 faab 	bl	80043cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69da      	ldr	r2, [r3, #28]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69d9      	ldr	r1, [r3, #28]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	021a      	lsls	r2, r3, #8
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	61da      	str	r2, [r3, #28]
      break;
 8003eaa:	e002      	b.n	8003eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_TIM_ConfigClockSource+0x1c>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e0b4      	b.n	800404a <HAL_TIM_ConfigClockSource+0x186>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f18:	d03e      	beq.n	8003f98 <HAL_TIM_ConfigClockSource+0xd4>
 8003f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1e:	f200 8087 	bhi.w	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f26:	f000 8086 	beq.w	8004036 <HAL_TIM_ConfigClockSource+0x172>
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2e:	d87f      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f30:	2b70      	cmp	r3, #112	; 0x70
 8003f32:	d01a      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0xa6>
 8003f34:	2b70      	cmp	r3, #112	; 0x70
 8003f36:	d87b      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f38:	2b60      	cmp	r3, #96	; 0x60
 8003f3a:	d050      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x11a>
 8003f3c:	2b60      	cmp	r3, #96	; 0x60
 8003f3e:	d877      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f40:	2b50      	cmp	r3, #80	; 0x50
 8003f42:	d03c      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0xfa>
 8003f44:	2b50      	cmp	r3, #80	; 0x50
 8003f46:	d873      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d058      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x13a>
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d86f      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b30      	cmp	r3, #48	; 0x30
 8003f52:	d064      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x15a>
 8003f54:	2b30      	cmp	r3, #48	; 0x30
 8003f56:	d86b      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d060      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x15a>
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d867      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d05c      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x15a>
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d05a      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x15a>
 8003f68:	e062      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	6899      	ldr	r1, [r3, #8]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f000 faf1 	bl	8004560 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	609a      	str	r2, [r3, #8]
      break;
 8003f96:	e04f      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	6899      	ldr	r1, [r3, #8]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f000 fada 	bl	8004560 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fba:	609a      	str	r2, [r3, #8]
      break;
 8003fbc:	e03c      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f000 fa4e 	bl	800446c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2150      	movs	r1, #80	; 0x50
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 faa7 	bl	800452a <TIM_ITRx_SetConfig>
      break;
 8003fdc:	e02c      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 fa6d 	bl	80044ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2160      	movs	r1, #96	; 0x60
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fa97 	bl	800452a <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e01c      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6859      	ldr	r1, [r3, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	461a      	mov	r2, r3
 800400c:	f000 fa2e 	bl	800446c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2140      	movs	r1, #64	; 0x40
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fa87 	bl	800452a <TIM_ITRx_SetConfig>
      break;
 800401c:	e00c      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4619      	mov	r1, r3
 8004028:	4610      	mov	r0, r2
 800402a:	f000 fa7e 	bl	800452a <TIM_ITRx_SetConfig>
      break;
 800402e:	e003      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
      break;
 8004034:	e000      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004036:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a34      	ldr	r2, [pc, #208]	; (8004138 <TIM_Base_SetConfig+0xe4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00f      	beq.n	800408c <TIM_Base_SetConfig+0x38>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004072:	d00b      	beq.n	800408c <TIM_Base_SetConfig+0x38>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a31      	ldr	r2, [pc, #196]	; (800413c <TIM_Base_SetConfig+0xe8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d007      	beq.n	800408c <TIM_Base_SetConfig+0x38>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a30      	ldr	r2, [pc, #192]	; (8004140 <TIM_Base_SetConfig+0xec>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_Base_SetConfig+0x38>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a2f      	ldr	r2, [pc, #188]	; (8004144 <TIM_Base_SetConfig+0xf0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d108      	bne.n	800409e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a25      	ldr	r2, [pc, #148]	; (8004138 <TIM_Base_SetConfig+0xe4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01b      	beq.n	80040de <TIM_Base_SetConfig+0x8a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d017      	beq.n	80040de <TIM_Base_SetConfig+0x8a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a22      	ldr	r2, [pc, #136]	; (800413c <TIM_Base_SetConfig+0xe8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <TIM_Base_SetConfig+0x8a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a21      	ldr	r2, [pc, #132]	; (8004140 <TIM_Base_SetConfig+0xec>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00f      	beq.n	80040de <TIM_Base_SetConfig+0x8a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a20      	ldr	r2, [pc, #128]	; (8004144 <TIM_Base_SetConfig+0xf0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00b      	beq.n	80040de <TIM_Base_SetConfig+0x8a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <TIM_Base_SetConfig+0xf4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d007      	beq.n	80040de <TIM_Base_SetConfig+0x8a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a1e      	ldr	r2, [pc, #120]	; (800414c <TIM_Base_SetConfig+0xf8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d003      	beq.n	80040de <TIM_Base_SetConfig+0x8a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a1d      	ldr	r2, [pc, #116]	; (8004150 <TIM_Base_SetConfig+0xfc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d108      	bne.n	80040f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a08      	ldr	r2, [pc, #32]	; (8004138 <TIM_Base_SetConfig+0xe4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d103      	bne.n	8004124 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	615a      	str	r2, [r3, #20]
}
 800412a:	bf00      	nop
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40010000 	.word	0x40010000
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800
 8004144:	40000c00 	.word	0x40000c00
 8004148:	40014000 	.word	0x40014000
 800414c:	40014400 	.word	0x40014400
 8004150:	40014800 	.word	0x40014800

08004154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0303 	bic.w	r3, r3, #3
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f023 0302 	bic.w	r3, r3, #2
 800419c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a1c      	ldr	r2, [pc, #112]	; (800421c <TIM_OC1_SetConfig+0xc8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10c      	bne.n	80041ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f023 0308 	bic.w	r3, r3, #8
 80041b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f023 0304 	bic.w	r3, r3, #4
 80041c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a13      	ldr	r2, [pc, #76]	; (800421c <TIM_OC1_SetConfig+0xc8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d111      	bne.n	80041f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	621a      	str	r2, [r3, #32]
}
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	40010000 	.word	0x40010000

08004220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0210 	bic.w	r2, r3, #16
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0320 	bic.w	r3, r3, #32
 800426a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a1e      	ldr	r2, [pc, #120]	; (80042f4 <TIM_OC2_SetConfig+0xd4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10d      	bne.n	800429c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a15      	ldr	r2, [pc, #84]	; (80042f4 <TIM_OC2_SetConfig+0xd4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d113      	bne.n	80042cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40010000 	.word	0x40010000

080042f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0303 	bic.w	r3, r3, #3
 800432e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a1d      	ldr	r2, [pc, #116]	; (80043c8 <TIM_OC3_SetConfig+0xd0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d10d      	bne.n	8004372 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800435c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a14      	ldr	r2, [pc, #80]	; (80043c8 <TIM_OC3_SetConfig+0xd0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d113      	bne.n	80043a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	621a      	str	r2, [r3, #32]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40010000 	.word	0x40010000

080043cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	021b      	lsls	r3, r3, #8
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	031b      	lsls	r3, r3, #12
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a10      	ldr	r2, [pc, #64]	; (8004468 <TIM_OC4_SetConfig+0x9c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d109      	bne.n	8004440 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004432:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	019b      	lsls	r3, r3, #6
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	621a      	str	r2, [r3, #32]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40010000 	.word	0x40010000

0800446c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0201 	bic.w	r2, r3, #1
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f023 030a 	bic.w	r3, r3, #10
 80044a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b087      	sub	sp, #28
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f023 0210 	bic.w	r2, r3, #16
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	031b      	lsls	r3, r3, #12
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004506:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	621a      	str	r2, [r3, #32]
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800452a:	b480      	push	{r7}
 800452c:	b085      	sub	sp, #20
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	f043 0307 	orr.w	r3, r3, #7
 800454c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	609a      	str	r2, [r3, #8]
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800457a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	021a      	lsls	r2, r3, #8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	431a      	orrs	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4313      	orrs	r3, r2
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	609a      	str	r2, [r3, #8]
}
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	2201      	movs	r2, #1
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a1a      	ldr	r2, [r3, #32]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	401a      	ands	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	fa01 f303 	lsl.w	r3, r1, r3
 80045d8:	431a      	orrs	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004600:	2302      	movs	r3, #2
 8004602:	e050      	b.n	80046a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1c      	ldr	r2, [pc, #112]	; (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d018      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004650:	d013      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a18      	ldr	r2, [pc, #96]	; (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00e      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a16      	ldr	r2, [pc, #88]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a13      	ldr	r2, [pc, #76]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d10c      	bne.n	8004694 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	4313      	orrs	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010000 	.word	0x40010000
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00
 80046c4:	40014000 	.word	0x40014000

080046c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046c8:	b084      	sub	sp, #16
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	f107 001c 	add.w	r0, r7, #28
 80046d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d122      	bne.n	8004726 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470a:	2b01      	cmp	r3, #1
 800470c:	d105      	bne.n	800471a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f001 fbee 	bl	8005efc <USB_CoreReset>
 8004720:	4603      	mov	r3, r0
 8004722:	73fb      	strb	r3, [r7, #15]
 8004724:	e01a      	b.n	800475c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f001 fbe2 	bl	8005efc <USB_CoreReset>
 8004738:	4603      	mov	r3, r0
 800473a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800473c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
 800474e:	e005      	b.n	800475c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	2b01      	cmp	r3, #1
 8004760:	d10b      	bne.n	800477a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f043 0206 	orr.w	r2, r3, #6
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004786:	b004      	add	sp, #16
 8004788:	4770      	bx	lr
	...

0800478c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	4613      	mov	r3, r2
 8004798:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d165      	bne.n	800486c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4a41      	ldr	r2, [pc, #260]	; (80048a8 <USB_SetTurnaroundTime+0x11c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d906      	bls.n	80047b6 <USB_SetTurnaroundTime+0x2a>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4a40      	ldr	r2, [pc, #256]	; (80048ac <USB_SetTurnaroundTime+0x120>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d202      	bcs.n	80047b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80047b0:	230f      	movs	r3, #15
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	e062      	b.n	800487c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4a3c      	ldr	r2, [pc, #240]	; (80048ac <USB_SetTurnaroundTime+0x120>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d306      	bcc.n	80047cc <USB_SetTurnaroundTime+0x40>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4a3b      	ldr	r2, [pc, #236]	; (80048b0 <USB_SetTurnaroundTime+0x124>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d202      	bcs.n	80047cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047c6:	230e      	movs	r3, #14
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	e057      	b.n	800487c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4a38      	ldr	r2, [pc, #224]	; (80048b0 <USB_SetTurnaroundTime+0x124>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d306      	bcc.n	80047e2 <USB_SetTurnaroundTime+0x56>
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4a37      	ldr	r2, [pc, #220]	; (80048b4 <USB_SetTurnaroundTime+0x128>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d202      	bcs.n	80047e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047dc:	230d      	movs	r3, #13
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	e04c      	b.n	800487c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4a33      	ldr	r2, [pc, #204]	; (80048b4 <USB_SetTurnaroundTime+0x128>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d306      	bcc.n	80047f8 <USB_SetTurnaroundTime+0x6c>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	4a32      	ldr	r2, [pc, #200]	; (80048b8 <USB_SetTurnaroundTime+0x12c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d802      	bhi.n	80047f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80047f2:	230c      	movs	r3, #12
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e041      	b.n	800487c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4a2f      	ldr	r2, [pc, #188]	; (80048b8 <USB_SetTurnaroundTime+0x12c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d906      	bls.n	800480e <USB_SetTurnaroundTime+0x82>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4a2e      	ldr	r2, [pc, #184]	; (80048bc <USB_SetTurnaroundTime+0x130>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d802      	bhi.n	800480e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004808:	230b      	movs	r3, #11
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e036      	b.n	800487c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	4a2a      	ldr	r2, [pc, #168]	; (80048bc <USB_SetTurnaroundTime+0x130>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d906      	bls.n	8004824 <USB_SetTurnaroundTime+0x98>
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	4a29      	ldr	r2, [pc, #164]	; (80048c0 <USB_SetTurnaroundTime+0x134>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d802      	bhi.n	8004824 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800481e:	230a      	movs	r3, #10
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	e02b      	b.n	800487c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <USB_SetTurnaroundTime+0x134>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d906      	bls.n	800483a <USB_SetTurnaroundTime+0xae>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4a25      	ldr	r2, [pc, #148]	; (80048c4 <USB_SetTurnaroundTime+0x138>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d202      	bcs.n	800483a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004834:	2309      	movs	r3, #9
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	e020      	b.n	800487c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4a21      	ldr	r2, [pc, #132]	; (80048c4 <USB_SetTurnaroundTime+0x138>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d306      	bcc.n	8004850 <USB_SetTurnaroundTime+0xc4>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4a20      	ldr	r2, [pc, #128]	; (80048c8 <USB_SetTurnaroundTime+0x13c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d802      	bhi.n	8004850 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800484a:	2308      	movs	r3, #8
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	e015      	b.n	800487c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4a1d      	ldr	r2, [pc, #116]	; (80048c8 <USB_SetTurnaroundTime+0x13c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d906      	bls.n	8004866 <USB_SetTurnaroundTime+0xda>
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4a1c      	ldr	r2, [pc, #112]	; (80048cc <USB_SetTurnaroundTime+0x140>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d202      	bcs.n	8004866 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004860:	2307      	movs	r3, #7
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	e00a      	b.n	800487c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004866:	2306      	movs	r3, #6
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e007      	b.n	800487c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800486c:	79fb      	ldrb	r3, [r7, #7]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004872:	2309      	movs	r3, #9
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	e001      	b.n	800487c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004878:	2309      	movs	r3, #9
 800487a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	029b      	lsls	r3, r3, #10
 8004890:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004894:	431a      	orrs	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	00d8acbf 	.word	0x00d8acbf
 80048ac:	00e4e1c0 	.word	0x00e4e1c0
 80048b0:	00f42400 	.word	0x00f42400
 80048b4:	01067380 	.word	0x01067380
 80048b8:	011a499f 	.word	0x011a499f
 80048bc:	01312cff 	.word	0x01312cff
 80048c0:	014ca43f 	.word	0x014ca43f
 80048c4:	016e3600 	.word	0x016e3600
 80048c8:	01a6ab1f 	.word	0x01a6ab1f
 80048cc:	01e84800 	.word	0x01e84800

080048d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f043 0201 	orr.w	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f023 0201 	bic.w	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d115      	bne.n	8004962 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004942:	2001      	movs	r0, #1
 8004944:	f7fc fa84 	bl	8000e50 <HAL_Delay>
      ms++;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3301      	adds	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f001 fa45 	bl	8005dde <USB_GetMode>
 8004954:	4603      	mov	r3, r0
 8004956:	2b01      	cmp	r3, #1
 8004958:	d01e      	beq.n	8004998 <USB_SetCurrentMode+0x84>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b31      	cmp	r3, #49	; 0x31
 800495e:	d9f0      	bls.n	8004942 <USB_SetCurrentMode+0x2e>
 8004960:	e01a      	b.n	8004998 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d115      	bne.n	8004994 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004974:	2001      	movs	r0, #1
 8004976:	f7fc fa6b 	bl	8000e50 <HAL_Delay>
      ms++;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3301      	adds	r3, #1
 800497e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f001 fa2c 	bl	8005dde <USB_GetMode>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <USB_SetCurrentMode+0x84>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b31      	cmp	r3, #49	; 0x31
 8004990:	d9f0      	bls.n	8004974 <USB_SetCurrentMode+0x60>
 8004992:	e001      	b.n	8004998 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e005      	b.n	80049a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b32      	cmp	r3, #50	; 0x32
 800499c:	d101      	bne.n	80049a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049ac:	b084      	sub	sp, #16
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b086      	sub	sp, #24
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049c6:	2300      	movs	r3, #0
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	e009      	b.n	80049e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	3340      	adds	r3, #64	; 0x40
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	2200      	movs	r2, #0
 80049d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	3301      	adds	r3, #1
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b0e      	cmp	r3, #14
 80049e4:	d9f2      	bls.n	80049cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d11c      	bne.n	8004a26 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049fa:	f043 0302 	orr.w	r3, r3, #2
 80049fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a10:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38
 8004a24:	e00b      	b.n	8004a3e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a44:	461a      	mov	r2, r3
 8004a46:	2300      	movs	r3, #0
 8004a48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a50:	4619      	mov	r1, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a58:	461a      	mov	r2, r3
 8004a5a:	680b      	ldr	r3, [r1, #0]
 8004a5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d10c      	bne.n	8004a7e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f965 	bl	8004d3c <USB_SetDevSpeed>
 8004a72:	e008      	b.n	8004a86 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a74:	2101      	movs	r1, #1
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f960 	bl	8004d3c <USB_SetDevSpeed>
 8004a7c:	e003      	b.n	8004a86 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a7e:	2103      	movs	r1, #3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f95b 	bl	8004d3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a86:	2110      	movs	r1, #16
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f8f3 	bl	8004c74 <USB_FlushTxFifo>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f91f 	bl	8004cdc <USB_FlushRxFifo>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aae:	461a      	mov	r2, r3
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aba:	461a      	mov	r2, r3
 8004abc:	2300      	movs	r3, #0
 8004abe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004acc:	2300      	movs	r3, #0
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	e043      	b.n	8004b5a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ae8:	d118      	bne.n	8004b1c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afc:	461a      	mov	r2, r3
 8004afe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	e013      	b.n	8004b2e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b12:	461a      	mov	r2, r3
 8004b14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	e008      	b.n	8004b2e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	3301      	adds	r3, #1
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d3b7      	bcc.n	8004ad2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	e043      	b.n	8004bf0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b7e:	d118      	bne.n	8004bb2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b92:	461a      	mov	r2, r3
 8004b94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e013      	b.n	8004bc4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	e008      	b.n	8004bc4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	461a      	mov	r2, r3
 8004be4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004be8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3301      	adds	r3, #1
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d3b7      	bcc.n	8004b68 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d105      	bne.n	8004c2c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f043 0210 	orr.w	r2, r3, #16
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699a      	ldr	r2, [r3, #24]
 8004c30:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <USB_DevInit+0x2c4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f043 0208 	orr.w	r2, r3, #8
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d107      	bne.n	8004c60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c58:	f043 0304 	orr.w	r3, r3, #4
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c6c:	b004      	add	sp, #16
 8004c6e:	4770      	bx	lr
 8004c70:	803c3800 	.word	0x803c3800

08004c74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3301      	adds	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <USB_FlushTxFifo+0x64>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d901      	bls.n	8004c94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e01b      	b.n	8004ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	daf2      	bge.n	8004c82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	019b      	lsls	r3, r3, #6
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a08      	ldr	r2, [pc, #32]	; (8004cd8 <USB_FlushTxFifo+0x64>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e006      	b.n	8004ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d0f0      	beq.n	8004cac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	00030d40 	.word	0x00030d40

08004cdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3301      	adds	r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a11      	ldr	r2, [pc, #68]	; (8004d38 <USB_FlushRxFifo+0x5c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e018      	b.n	8004d2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	daf2      	bge.n	8004ce8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2210      	movs	r2, #16
 8004d0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <USB_FlushRxFifo+0x5c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e006      	b.n	8004d2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0310 	and.w	r3, r3, #16
 8004d26:	2b10      	cmp	r3, #16
 8004d28:	d0f0      	beq.n	8004d0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	00030d40 	.word	0x00030d40

08004d3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b087      	sub	sp, #28
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 0306 	and.w	r3, r3, #6
 8004d86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d102      	bne.n	8004d94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	75fb      	strb	r3, [r7, #23]
 8004d92:	e00a      	b.n	8004daa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d002      	beq.n	8004da0 <USB_GetDevSpeed+0x32>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b06      	cmp	r3, #6
 8004d9e:	d102      	bne.n	8004da6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004da0:	2302      	movs	r3, #2
 8004da2:	75fb      	strb	r3, [r7, #23]
 8004da4:	e001      	b.n	8004daa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004da6:	230f      	movs	r3, #15
 8004da8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	785b      	ldrb	r3, [r3, #1]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d13a      	bne.n	8004e4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	2101      	movs	r1, #1
 8004de6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	68f9      	ldr	r1, [r7, #12]
 8004dee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d155      	bne.n	8004eb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	791b      	ldrb	r3, [r3, #4]
 8004e26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	059b      	lsls	r3, r3, #22
 8004e2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e30:	4313      	orrs	r3, r2
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	e036      	b.n	8004eb8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e50:	69da      	ldr	r2, [r3, #28]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	041b      	lsls	r3, r3, #16
 8004e62:	68f9      	ldr	r1, [r7, #12]
 8004e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d11a      	bne.n	8004eb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	791b      	ldrb	r3, [r3, #4]
 8004e9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
	...

08004ec8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	785b      	ldrb	r3, [r3, #1]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d161      	bne.n	8004fa8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004efa:	d11f      	bne.n	8004f3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	43db      	mvns	r3, r3
 8004f56:	68f9      	ldr	r1, [r7, #12]
 8004f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	2101      	movs	r1, #1
 8004f72:	fa01 f303 	lsl.w	r3, r1, r3
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	68f9      	ldr	r1, [r7, #12]
 8004f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f80:	4013      	ands	r3, r2
 8004f82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	0159      	lsls	r1, r3, #5
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	440b      	add	r3, r1
 8004f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4b35      	ldr	r3, [pc, #212]	; (8005078 <USB_DeactivateEndpoint+0x1b0>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]
 8004fa6:	e060      	b.n	800506a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fbe:	d11f      	bne.n	8005000 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ffe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	2101      	movs	r1, #1
 8005012:	fa01 f303 	lsl.w	r3, r1, r3
 8005016:	041b      	lsls	r3, r3, #16
 8005018:	43db      	mvns	r3, r3
 800501a:	68f9      	ldr	r1, [r7, #12]
 800501c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005020:	4013      	ands	r3, r2
 8005022:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	2101      	movs	r1, #1
 8005036:	fa01 f303 	lsl.w	r3, r1, r3
 800503a:	041b      	lsls	r3, r3, #16
 800503c:	43db      	mvns	r3, r3
 800503e:	68f9      	ldr	r1, [r7, #12]
 8005040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005044:	4013      	ands	r3, r2
 8005046:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	0159      	lsls	r1, r3, #5
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	440b      	add	r3, r1
 800505e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005062:	4619      	mov	r1, r3
 8005064:	4b05      	ldr	r3, [pc, #20]	; (800507c <USB_DeactivateEndpoint+0x1b4>)
 8005066:	4013      	ands	r3, r2
 8005068:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	ec337800 	.word	0xec337800
 800507c:	eff37800 	.word	0xeff37800

08005080 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	4613      	mov	r3, r2
 800508c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	785b      	ldrb	r3, [r3, #1]
 800509c:	2b01      	cmp	r3, #1
 800509e:	f040 815c 	bne.w	800535a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d132      	bne.n	8005110 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	0151      	lsls	r1, r2, #5
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	440a      	add	r2, r1
 80050c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	0151      	lsls	r1, r2, #5
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	440a      	add	r2, r1
 80050e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	0151      	lsls	r1, r2, #5
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	440a      	add	r2, r1
 8005104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005108:	0cdb      	lsrs	r3, r3, #19
 800510a:	04db      	lsls	r3, r3, #19
 800510c:	6113      	str	r3, [r2, #16]
 800510e:	e074      	b.n	80051fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	0151      	lsls	r1, r2, #5
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	440a      	add	r2, r1
 8005126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512a:	0cdb      	lsrs	r3, r3, #19
 800512c:	04db      	lsls	r3, r3, #19
 800512e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	0151      	lsls	r1, r2, #5
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	440a      	add	r2, r1
 8005146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800514a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800514e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005152:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6999      	ldr	r1, [r3, #24]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	440b      	add	r3, r1
 800516c:	1e59      	subs	r1, r3, #1
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	fbb1 f3f3 	udiv	r3, r1, r3
 8005176:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005178:	4b9d      	ldr	r3, [pc, #628]	; (80053f0 <USB_EPStartXfer+0x370>)
 800517a:	400b      	ands	r3, r1
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	0148      	lsls	r0, r1, #5
 8005180:	69f9      	ldr	r1, [r7, #28]
 8005182:	4401      	add	r1, r0
 8005184:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005188:	4313      	orrs	r3, r2
 800518a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a2:	69b9      	ldr	r1, [r7, #24]
 80051a4:	0148      	lsls	r0, r1, #5
 80051a6:	69f9      	ldr	r1, [r7, #28]
 80051a8:	4401      	add	r1, r0
 80051aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051ae:	4313      	orrs	r3, r2
 80051b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	791b      	ldrb	r3, [r3, #4]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d11f      	bne.n	80051fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80051d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d14b      	bne.n	8005298 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d009      	beq.n	800521c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	461a      	mov	r2, r3
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	791b      	ldrb	r3, [r3, #4]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d128      	bne.n	8005276 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d110      	bne.n	8005256 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	e00f      	b.n	8005276 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005274:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	69fa      	ldr	r2, [r7, #28]
 800528a:	440a      	add	r2, r1
 800528c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005290:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	e133      	b.n	8005500 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	0151      	lsls	r1, r2, #5
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	440a      	add	r2, r1
 80052ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	791b      	ldrb	r3, [r3, #4]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d015      	beq.n	80052ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 811b 	beq.w	8005500 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	2101      	movs	r1, #1
 80052dc:	fa01 f303 	lsl.w	r3, r1, r3
 80052e0:	69f9      	ldr	r1, [r7, #28]
 80052e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052e6:	4313      	orrs	r3, r2
 80052e8:	634b      	str	r3, [r1, #52]	; 0x34
 80052ea:	e109      	b.n	8005500 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d110      	bne.n	800531e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	0151      	lsls	r1, r2, #5
 800530e:	69fa      	ldr	r2, [r7, #28]
 8005310:	440a      	add	r2, r1
 8005312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005316:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	e00f      	b.n	800533e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	440a      	add	r2, r1
 8005334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6919      	ldr	r1, [r3, #16]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	781a      	ldrb	r2, [r3, #0]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	b298      	uxth	r0, r3
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	4603      	mov	r3, r0
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 fade 	bl	8005914 <USB_WritePacket>
 8005358:	e0d2      	b.n	8005500 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	0151      	lsls	r1, r2, #5
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	440a      	add	r2, r1
 8005370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005374:	0cdb      	lsrs	r3, r3, #19
 8005376:	04db      	lsls	r3, r3, #19
 8005378:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	0151      	lsls	r1, r2, #5
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	440a      	add	r2, r1
 8005390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005394:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005398:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800539c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d126      	bne.n	80053f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053bc:	69b9      	ldr	r1, [r7, #24]
 80053be:	0148      	lsls	r0, r1, #5
 80053c0:	69f9      	ldr	r1, [r7, #28]
 80053c2:	4401      	add	r1, r0
 80053c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053c8:	4313      	orrs	r3, r2
 80053ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053ea:	6113      	str	r3, [r2, #16]
 80053ec:	e03a      	b.n	8005464 <USB_EPStartXfer+0x3e4>
 80053ee:	bf00      	nop
 80053f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	699a      	ldr	r2, [r3, #24]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	1e5a      	subs	r2, r3, #1
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	fbb2 f3f3 	udiv	r3, r2, r3
 8005408:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	8afa      	ldrh	r2, [r7, #22]
 8005410:	fb03 f202 	mul.w	r2, r3, r2
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	8afb      	ldrh	r3, [r7, #22]
 8005428:	04d9      	lsls	r1, r3, #19
 800542a:	4b38      	ldr	r3, [pc, #224]	; (800550c <USB_EPStartXfer+0x48c>)
 800542c:	400b      	ands	r3, r1
 800542e:	69b9      	ldr	r1, [r7, #24]
 8005430:	0148      	lsls	r0, r1, #5
 8005432:	69f9      	ldr	r1, [r7, #28]
 8005434:	4401      	add	r1, r0
 8005436:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800543a:	4313      	orrs	r3, r2
 800543c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005454:	69b9      	ldr	r1, [r7, #24]
 8005456:	0148      	lsls	r0, r1, #5
 8005458:	69f9      	ldr	r1, [r7, #28]
 800545a:	4401      	add	r1, r0
 800545c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005460:	4313      	orrs	r3, r2
 8005462:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10d      	bne.n	8005486 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	6919      	ldr	r1, [r3, #16]
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	460a      	mov	r2, r1
 8005484:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	791b      	ldrb	r3, [r3, #4]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d128      	bne.n	80054e0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549a:	2b00      	cmp	r3, #0
 800549c:	d110      	bne.n	80054c0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e00f      	b.n	80054e0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	1ff80000 	.word	0x1ff80000

08005510 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	4613      	mov	r3, r2
 800551c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b01      	cmp	r3, #1
 800552e:	f040 80ce 	bne.w	80056ce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d132      	bne.n	80055a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	440a      	add	r2, r1
 8005550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005554:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005558:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800555c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	0151      	lsls	r1, r2, #5
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	440a      	add	r2, r1
 8005574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800557c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005598:	0cdb      	lsrs	r3, r3, #19
 800559a:	04db      	lsls	r3, r3, #19
 800559c:	6113      	str	r3, [r2, #16]
 800559e:	e04e      	b.n	800563e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ba:	0cdb      	lsrs	r3, r3, #19
 80055bc:	04db      	lsls	r3, r3, #19
 80055be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	0151      	lsls	r1, r2, #5
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	440a      	add	r2, r1
 80055d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	699a      	ldr	r2, [r3, #24]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d903      	bls.n	80055f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	440a      	add	r2, r1
 800560e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005616:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800562e:	6939      	ldr	r1, [r7, #16]
 8005630:	0148      	lsls	r0, r1, #5
 8005632:	6979      	ldr	r1, [r7, #20]
 8005634:	4401      	add	r1, r0
 8005636:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800563a:	4313      	orrs	r3, r2
 800563c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d11e      	bne.n	8005682 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d009      	beq.n	8005660 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005658:	461a      	mov	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	0151      	lsls	r1, r2, #5
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	440a      	add	r2, r1
 8005676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	e097      	b.n	80057b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 8083 	beq.w	80057b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	f003 030f 	and.w	r3, r3, #15
 80056bc:	2101      	movs	r1, #1
 80056be:	fa01 f303 	lsl.w	r3, r1, r3
 80056c2:	6979      	ldr	r1, [r7, #20]
 80056c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056c8:	4313      	orrs	r3, r2
 80056ca:	634b      	str	r3, [r1, #52]	; 0x34
 80056cc:	e071      	b.n	80057b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e8:	0cdb      	lsrs	r3, r3, #19
 80056ea:	04db      	lsls	r3, r3, #19
 80056ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005708:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800570c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005710:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	440a      	add	r2, r1
 8005740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005748:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005760:	6939      	ldr	r1, [r7, #16]
 8005762:	0148      	lsls	r0, r1, #5
 8005764:	6979      	ldr	r1, [r7, #20]
 8005766:	4401      	add	r1, r0
 8005768:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800576c:	4313      	orrs	r3, r2
 800576e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d10d      	bne.n	8005792 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6919      	ldr	r1, [r3, #16]
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578e:	460a      	mov	r2, r1
 8005790:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	0151      	lsls	r1, r2, #5
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	440a      	add	r2, r1
 80057a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d14a      	bne.n	8005874 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057f6:	f040 8086 	bne.w	8005906 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	7812      	ldrb	r2, [r2, #0]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005818:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800581c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	7812      	ldrb	r2, [r2, #0]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	440a      	add	r2, r1
 8005838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005840:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	3301      	adds	r3, #1
 8005846:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f242 7210 	movw	r2, #10000	; 0x2710
 800584e:	4293      	cmp	r3, r2
 8005850:	d902      	bls.n	8005858 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	75fb      	strb	r3, [r7, #23]
          break;
 8005856:	e056      	b.n	8005906 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800586c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005870:	d0e7      	beq.n	8005842 <USB_EPStopXfer+0x82>
 8005872:	e048      	b.n	8005906 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800588c:	d13b      	bne.n	8005906 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	7812      	ldrb	r2, [r2, #0]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	7812      	ldrb	r2, [r2, #0]
 80058c6:	0151      	lsls	r1, r2, #5
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	440a      	add	r2, r1
 80058cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3301      	adds	r3, #1
 80058da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f242 7210 	movw	r2, #10000	; 0x2710
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d902      	bls.n	80058ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75fb      	strb	r3, [r7, #23]
          break;
 80058ea:	e00c      	b.n	8005906 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005904:	d0e7      	beq.n	80058d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005906:	7dfb      	ldrb	r3, [r7, #23]
}
 8005908:	4618      	mov	r0, r3
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005914:	b480      	push	{r7}
 8005916:	b089      	sub	sp, #36	; 0x24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	4611      	mov	r1, r2
 8005920:	461a      	mov	r2, r3
 8005922:	460b      	mov	r3, r1
 8005924:	71fb      	strb	r3, [r7, #7]
 8005926:	4613      	mov	r3, r2
 8005928:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005932:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005936:	2b00      	cmp	r3, #0
 8005938:	d123      	bne.n	8005982 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800593a:	88bb      	ldrh	r3, [r7, #4]
 800593c:	3303      	adds	r3, #3
 800593e:	089b      	lsrs	r3, r3, #2
 8005940:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005942:	2300      	movs	r3, #0
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	e018      	b.n	800597a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	031a      	lsls	r2, r3, #12
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	4413      	add	r3, r2
 8005950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005954:	461a      	mov	r2, r3
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	3301      	adds	r3, #1
 8005960:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	3301      	adds	r3, #1
 8005966:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	3301      	adds	r3, #1
 800596c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	3301      	adds	r3, #1
 8005972:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	3301      	adds	r3, #1
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	429a      	cmp	r2, r3
 8005980:	d3e2      	bcc.n	8005948 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3724      	adds	r7, #36	; 0x24
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005990:	b480      	push	{r7}
 8005992:	b08b      	sub	sp, #44	; 0x2c
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	4613      	mov	r3, r2
 800599c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	089b      	lsrs	r3, r3, #2
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	f003 0303 	and.w	r3, r3, #3
 80059b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059b6:	2300      	movs	r3, #0
 80059b8:	623b      	str	r3, [r7, #32]
 80059ba:	e014      	b.n	80059e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	3301      	adds	r3, #1
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	3301      	adds	r3, #1
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	3301      	adds	r3, #1
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	3301      	adds	r3, #1
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	3301      	adds	r3, #1
 80059e4:	623b      	str	r3, [r7, #32]
 80059e6:	6a3a      	ldr	r2, [r7, #32]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d3e6      	bcc.n	80059bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059ee:	8bfb      	ldrh	r3, [r7, #30]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01e      	beq.n	8005a32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059fe:	461a      	mov	r2, r3
 8005a00:	f107 0310 	add.w	r3, r7, #16
 8005a04:	6812      	ldr	r2, [r2, #0]
 8005a06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	fa22 f303 	lsr.w	r3, r2, r3
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	701a      	strb	r2, [r3, #0]
      i++;
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	3301      	adds	r3, #1
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a26:	8bfb      	ldrh	r3, [r7, #30]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a2c:	8bfb      	ldrh	r3, [r7, #30]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1ea      	bne.n	8005a08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	372c      	adds	r7, #44	; 0x2c
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d12c      	bne.n	8005ab6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	db12      	blt.n	8005a94 <USB_EPSetStall+0x54>
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00f      	beq.n	8005a94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	0151      	lsls	r1, r2, #5
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	440a      	add	r2, r1
 8005a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	e02b      	b.n	8005b0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	db12      	blt.n	8005aee <USB_EPSetStall+0xae>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00f      	beq.n	8005aee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005aec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	785b      	ldrb	r3, [r3, #1]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d128      	bne.n	8005b8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	791b      	ldrb	r3, [r3, #4]
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d003      	beq.n	8005b68 <USB_EPClearStall+0x4c>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	791b      	ldrb	r3, [r3, #4]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d138      	bne.n	8005bda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	e027      	b.n	8005bda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ba8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	791b      	ldrb	r3, [r3, #4]
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d003      	beq.n	8005bba <USB_EPClearStall+0x9e>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	791b      	ldrb	r3, [r3, #4]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d10f      	bne.n	8005bda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c1c:	68f9      	ldr	r1, [r7, #12]
 8005c1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c22:	4313      	orrs	r3, r2
 8005c24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c4e:	f023 0303 	bic.w	r3, r3, #3
 8005c52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c62:	f023 0302 	bic.w	r3, r3, #2
 8005c66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b085      	sub	sp, #20
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c90:	f023 0303 	bic.w	r3, r3, #3
 8005c94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ca4:	f043 0302 	orr.w	r3, r3, #2
 8005ca8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b085      	sub	sp, #20
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	0c1b      	lsrs	r3, r3, #16
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	4013      	ands	r3, r2
 8005d34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	b29b      	uxth	r3, r3
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4013      	ands	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d74:	68bb      	ldr	r3, [r7, #8]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b087      	sub	sp, #28
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005da6:	78fb      	ldrb	r3, [r7, #3]
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	fa22 f303 	lsr.w	r3, r2, r3
 8005db2:	01db      	lsls	r3, r3, #7
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f003 0301 	and.w	r3, r3, #1
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b085      	sub	sp, #20
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e18:	f023 0307 	bic.w	r3, r3, #7
 8005e1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	333c      	adds	r3, #60	; 0x3c
 8005e56:	3304      	adds	r3, #4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4a26      	ldr	r2, [pc, #152]	; (8005ef8 <USB_EP0_OutStart+0xb8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d90a      	bls.n	8005e7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e74:	d101      	bne.n	8005e7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e037      	b.n	8005eea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e80:	461a      	mov	r2, r3
 8005e82:	2300      	movs	r3, #0
 8005e84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea8:	f043 0318 	orr.w	r3, r3, #24
 8005eac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ebc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ec0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ec2:	7afb      	ldrb	r3, [r7, #11]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d10f      	bne.n	8005ee8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ece:	461a      	mov	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ee6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	4f54300a 	.word	0x4f54300a

08005efc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4a13      	ldr	r2, [pc, #76]	; (8005f60 <USB_CoreReset+0x64>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d901      	bls.n	8005f1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e01b      	b.n	8005f52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	daf2      	bge.n	8005f08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f043 0201 	orr.w	r2, r3, #1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3301      	adds	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4a09      	ldr	r2, [pc, #36]	; (8005f60 <USB_CoreReset+0x64>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d901      	bls.n	8005f44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e006      	b.n	8005f52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d0f0      	beq.n	8005f32 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	00030d40 	.word	0x00030d40

08005f64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f74:	f002 fca6 	bl	80088c4 <USBD_static_malloc>
 8005f78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d109      	bne.n	8005f94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	32b0      	adds	r2, #176	; 0xb0
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005f90:	2302      	movs	r3, #2
 8005f92:	e0d4      	b.n	800613e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005f94:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005f98:	2100      	movs	r1, #0
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f002 fcd6 	bl	800894c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	32b0      	adds	r2, #176	; 0xb0
 8005faa:	68f9      	ldr	r1, [r7, #12]
 8005fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	32b0      	adds	r2, #176	; 0xb0
 8005fba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	7c1b      	ldrb	r3, [r3, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d138      	bne.n	800603e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005fcc:	4b5e      	ldr	r3, [pc, #376]	; (8006148 <USBD_CDC_Init+0x1e4>)
 8005fce:	7819      	ldrb	r1, [r3, #0]
 8005fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f002 fb51 	bl	800867e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005fdc:	4b5a      	ldr	r3, [pc, #360]	; (8006148 <USBD_CDC_Init+0x1e4>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f003 020f 	and.w	r2, r3, #15
 8005fe4:	6879      	ldr	r1, [r7, #4]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	440b      	add	r3, r1
 8005ff0:	3324      	adds	r3, #36	; 0x24
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ff6:	4b55      	ldr	r3, [pc, #340]	; (800614c <USBD_CDC_Init+0x1e8>)
 8005ff8:	7819      	ldrb	r1, [r3, #0]
 8005ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ffe:	2202      	movs	r2, #2
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f002 fb3c 	bl	800867e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006006:	4b51      	ldr	r3, [pc, #324]	; (800614c <USBD_CDC_Init+0x1e8>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	f003 020f 	and.w	r2, r3, #15
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800601e:	2201      	movs	r2, #1
 8006020:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006022:	4b4b      	ldr	r3, [pc, #300]	; (8006150 <USBD_CDC_Init+0x1ec>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	f003 020f 	and.w	r2, r3, #15
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	3326      	adds	r3, #38	; 0x26
 8006038:	2210      	movs	r2, #16
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	e035      	b.n	80060aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800603e:	4b42      	ldr	r3, [pc, #264]	; (8006148 <USBD_CDC_Init+0x1e4>)
 8006040:	7819      	ldrb	r1, [r3, #0]
 8006042:	2340      	movs	r3, #64	; 0x40
 8006044:	2202      	movs	r2, #2
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f002 fb19 	bl	800867e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800604c:	4b3e      	ldr	r3, [pc, #248]	; (8006148 <USBD_CDC_Init+0x1e4>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	f003 020f 	and.w	r2, r3, #15
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	4613      	mov	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	440b      	add	r3, r1
 8006060:	3324      	adds	r3, #36	; 0x24
 8006062:	2201      	movs	r2, #1
 8006064:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006066:	4b39      	ldr	r3, [pc, #228]	; (800614c <USBD_CDC_Init+0x1e8>)
 8006068:	7819      	ldrb	r1, [r3, #0]
 800606a:	2340      	movs	r3, #64	; 0x40
 800606c:	2202      	movs	r2, #2
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f002 fb05 	bl	800867e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006074:	4b35      	ldr	r3, [pc, #212]	; (800614c <USBD_CDC_Init+0x1e8>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f003 020f 	and.w	r2, r3, #15
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	440b      	add	r3, r1
 8006088:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800608c:	2201      	movs	r2, #1
 800608e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006090:	4b2f      	ldr	r3, [pc, #188]	; (8006150 <USBD_CDC_Init+0x1ec>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	f003 020f 	and.w	r2, r3, #15
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	440b      	add	r3, r1
 80060a4:	3326      	adds	r3, #38	; 0x26
 80060a6:	2210      	movs	r2, #16
 80060a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80060aa:	4b29      	ldr	r3, [pc, #164]	; (8006150 <USBD_CDC_Init+0x1ec>)
 80060ac:	7819      	ldrb	r1, [r3, #0]
 80060ae:	2308      	movs	r3, #8
 80060b0:	2203      	movs	r2, #3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f002 fae3 	bl	800867e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80060b8:	4b25      	ldr	r3, [pc, #148]	; (8006150 <USBD_CDC_Init+0x1ec>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	f003 020f 	and.w	r2, r3, #15
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	3324      	adds	r3, #36	; 0x24
 80060ce:	2201      	movs	r2, #1
 80060d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	33b0      	adds	r3, #176	; 0xb0
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006108:	2302      	movs	r3, #2
 800610a:	e018      	b.n	800613e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	7c1b      	ldrb	r3, [r3, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006114:	4b0d      	ldr	r3, [pc, #52]	; (800614c <USBD_CDC_Init+0x1e8>)
 8006116:	7819      	ldrb	r1, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800611e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f002 fb9a 	bl	800885c <USBD_LL_PrepareReceive>
 8006128:	e008      	b.n	800613c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800612a:	4b08      	ldr	r3, [pc, #32]	; (800614c <USBD_CDC_Init+0x1e8>)
 800612c:	7819      	ldrb	r1, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006134:	2340      	movs	r3, #64	; 0x40
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f002 fb90 	bl	800885c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	200000a3 	.word	0x200000a3
 800614c:	200000a4 	.word	0x200000a4
 8006150:	200000a5 	.word	0x200000a5

08006154 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006160:	4b3a      	ldr	r3, [pc, #232]	; (800624c <USBD_CDC_DeInit+0xf8>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f002 faaf 	bl	80086ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800616c:	4b37      	ldr	r3, [pc, #220]	; (800624c <USBD_CDC_DeInit+0xf8>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 020f 	and.w	r2, r3, #15
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	3324      	adds	r3, #36	; 0x24
 8006182:	2200      	movs	r2, #0
 8006184:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006186:	4b32      	ldr	r3, [pc, #200]	; (8006250 <USBD_CDC_DeInit+0xfc>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f002 fa9c 	bl	80086ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006192:	4b2f      	ldr	r3, [pc, #188]	; (8006250 <USBD_CDC_DeInit+0xfc>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	f003 020f 	and.w	r2, r3, #15
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061aa:	2200      	movs	r2, #0
 80061ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80061ae:	4b29      	ldr	r3, [pc, #164]	; (8006254 <USBD_CDC_DeInit+0x100>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f002 fa88 	bl	80086ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80061ba:	4b26      	ldr	r3, [pc, #152]	; (8006254 <USBD_CDC_DeInit+0x100>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	f003 020f 	and.w	r2, r3, #15
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	3324      	adds	r3, #36	; 0x24
 80061d0:	2200      	movs	r2, #0
 80061d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80061d4:	4b1f      	ldr	r3, [pc, #124]	; (8006254 <USBD_CDC_DeInit+0x100>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	f003 020f 	and.w	r2, r3, #15
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	3326      	adds	r3, #38	; 0x26
 80061ea:	2200      	movs	r2, #0
 80061ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	32b0      	adds	r2, #176	; 0xb0
 80061f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01f      	beq.n	8006240 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	33b0      	adds	r3, #176	; 0xb0
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	32b0      	adds	r2, #176	; 0xb0
 800621e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006222:	4618      	mov	r0, r3
 8006224:	f002 fb5c 	bl	80088e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	32b0      	adds	r2, #176	; 0xb0
 8006232:	2100      	movs	r1, #0
 8006234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	200000a3 	.word	0x200000a3
 8006250:	200000a4 	.word	0x200000a4
 8006254:	200000a5 	.word	0x200000a5

08006258 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	32b0      	adds	r2, #176	; 0xb0
 800626c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006270:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006284:	2303      	movs	r3, #3
 8006286:	e0bf      	b.n	8006408 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006290:	2b00      	cmp	r3, #0
 8006292:	d050      	beq.n	8006336 <USBD_CDC_Setup+0xde>
 8006294:	2b20      	cmp	r3, #32
 8006296:	f040 80af 	bne.w	80063f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	88db      	ldrh	r3, [r3, #6]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d03a      	beq.n	8006318 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	b25b      	sxtb	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	da1b      	bge.n	80062e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	33b0      	adds	r3, #176	; 0xb0
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80062c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	88d2      	ldrh	r2, [r2, #6]
 80062c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	88db      	ldrh	r3, [r3, #6]
 80062ce:	2b07      	cmp	r3, #7
 80062d0:	bf28      	it	cs
 80062d2:	2307      	movcs	r3, #7
 80062d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	89fa      	ldrh	r2, [r7, #14]
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 fd89 	bl	8007df4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80062e2:	e090      	b.n	8006406 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	785a      	ldrb	r2, [r3, #1]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	88db      	ldrh	r3, [r3, #6]
 80062f2:	2b3f      	cmp	r3, #63	; 0x3f
 80062f4:	d803      	bhi.n	80062fe <USBD_CDC_Setup+0xa6>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	88db      	ldrh	r3, [r3, #6]
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	e000      	b.n	8006300 <USBD_CDC_Setup+0xa8>
 80062fe:	2240      	movs	r2, #64	; 0x40
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006306:	6939      	ldr	r1, [r7, #16]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800630e:	461a      	mov	r2, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 fd9b 	bl	8007e4c <USBD_CtlPrepareRx>
      break;
 8006316:	e076      	b.n	8006406 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	33b0      	adds	r3, #176	; 0xb0
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	7850      	ldrb	r0, [r2, #1]
 800632e:	2200      	movs	r2, #0
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	4798      	blx	r3
      break;
 8006334:	e067      	b.n	8006406 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	785b      	ldrb	r3, [r3, #1]
 800633a:	2b0b      	cmp	r3, #11
 800633c:	d851      	bhi.n	80063e2 <USBD_CDC_Setup+0x18a>
 800633e:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <USBD_CDC_Setup+0xec>)
 8006340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006344:	08006375 	.word	0x08006375
 8006348:	080063f1 	.word	0x080063f1
 800634c:	080063e3 	.word	0x080063e3
 8006350:	080063e3 	.word	0x080063e3
 8006354:	080063e3 	.word	0x080063e3
 8006358:	080063e3 	.word	0x080063e3
 800635c:	080063e3 	.word	0x080063e3
 8006360:	080063e3 	.word	0x080063e3
 8006364:	080063e3 	.word	0x080063e3
 8006368:	080063e3 	.word	0x080063e3
 800636c:	0800639f 	.word	0x0800639f
 8006370:	080063c9 	.word	0x080063c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b03      	cmp	r3, #3
 800637e:	d107      	bne.n	8006390 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006380:	f107 030a 	add.w	r3, r7, #10
 8006384:	2202      	movs	r2, #2
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f001 fd33 	bl	8007df4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800638e:	e032      	b.n	80063f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006390:	6839      	ldr	r1, [r7, #0]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 fcbd 	bl	8007d12 <USBD_CtlError>
            ret = USBD_FAIL;
 8006398:	2303      	movs	r3, #3
 800639a:	75fb      	strb	r3, [r7, #23]
          break;
 800639c:	e02b      	b.n	80063f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d107      	bne.n	80063ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80063aa:	f107 030d 	add.w	r3, r7, #13
 80063ae:	2201      	movs	r2, #1
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 fd1e 	bl	8007df4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063b8:	e01d      	b.n	80063f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 fca8 	bl	8007d12 <USBD_CtlError>
            ret = USBD_FAIL;
 80063c2:	2303      	movs	r3, #3
 80063c4:	75fb      	strb	r3, [r7, #23]
          break;
 80063c6:	e016      	b.n	80063f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d00f      	beq.n	80063f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f001 fc9b 	bl	8007d12 <USBD_CtlError>
            ret = USBD_FAIL;
 80063dc:	2303      	movs	r3, #3
 80063de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80063e0:	e008      	b.n	80063f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f001 fc94 	bl	8007d12 <USBD_CtlError>
          ret = USBD_FAIL;
 80063ea:	2303      	movs	r3, #3
 80063ec:	75fb      	strb	r3, [r7, #23]
          break;
 80063ee:	e002      	b.n	80063f6 <USBD_CDC_Setup+0x19e>
          break;
 80063f0:	bf00      	nop
 80063f2:	e008      	b.n	8006406 <USBD_CDC_Setup+0x1ae>
          break;
 80063f4:	bf00      	nop
      }
      break;
 80063f6:	e006      	b.n	8006406 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f001 fc89 	bl	8007d12 <USBD_CtlError>
      ret = USBD_FAIL;
 8006400:	2303      	movs	r3, #3
 8006402:	75fb      	strb	r3, [r7, #23]
      break;
 8006404:	bf00      	nop
  }

  return (uint8_t)ret;
 8006406:	7dfb      	ldrb	r3, [r7, #23]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006422:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	32b0      	adds	r2, #176	; 0xb0
 800642e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006436:	2303      	movs	r3, #3
 8006438:	e065      	b.n	8006506 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	32b0      	adds	r2, #176	; 0xb0
 8006444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006448:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	f003 020f 	and.w	r2, r3, #15
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	4613      	mov	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	440b      	add	r3, r1
 800645c:	3318      	adds	r3, #24
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d02f      	beq.n	80064c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	f003 020f 	and.w	r2, r3, #15
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	440b      	add	r3, r1
 8006476:	3318      	adds	r3, #24
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	78fb      	ldrb	r3, [r7, #3]
 800647c:	f003 010f 	and.w	r1, r3, #15
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	460b      	mov	r3, r1
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	440b      	add	r3, r1
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4403      	add	r3, r0
 800648c:	3348      	adds	r3, #72	; 0x48
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	fbb2 f1f3 	udiv	r1, r2, r3
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800649a:	2b00      	cmp	r3, #0
 800649c:	d112      	bne.n	80064c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	f003 020f 	and.w	r2, r3, #15
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	440b      	add	r3, r1
 80064b0:	3318      	adds	r3, #24
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064b6:	78f9      	ldrb	r1, [r7, #3]
 80064b8:	2300      	movs	r3, #0
 80064ba:	2200      	movs	r2, #0
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f002 f9ac 	bl	800881a <USBD_LL_Transmit>
 80064c2:	e01f      	b.n	8006504 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	33b0      	adds	r3, #176	; 0xb0
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d010      	beq.n	8006504 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	33b0      	adds	r3, #176	; 0xb0
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006500:	78fa      	ldrb	r2, [r7, #3]
 8006502:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	32b0      	adds	r2, #176	; 0xb0
 8006524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006528:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	32b0      	adds	r2, #176	; 0xb0
 8006534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800653c:	2303      	movs	r3, #3
 800653e:	e01a      	b.n	8006576 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f002 f9aa 	bl	800889e <USBD_LL_GetRxDataSize>
 800654a:	4602      	mov	r2, r0
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	33b0      	adds	r3, #176	; 0xb0
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006570:	4611      	mov	r1, r2
 8006572:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	32b0      	adds	r2, #176	; 0xb0
 8006590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006594:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800659c:	2303      	movs	r3, #3
 800659e:	e025      	b.n	80065ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	33b0      	adds	r3, #176	; 0xb0
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01a      	beq.n	80065ea <USBD_CDC_EP0_RxReady+0x6c>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80065ba:	2bff      	cmp	r3, #255	; 0xff
 80065bc:	d015      	beq.n	80065ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	33b0      	adds	r3, #176	; 0xb0
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80065d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80065de:	b292      	uxth	r2, r2
 80065e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	22ff      	movs	r2, #255	; 0xff
 80065e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065fc:	2182      	movs	r1, #130	; 0x82
 80065fe:	4818      	ldr	r0, [pc, #96]	; (8006660 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006600:	f000 fd4f 	bl	80070a2 <USBD_GetEpDesc>
 8006604:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006606:	2101      	movs	r1, #1
 8006608:	4815      	ldr	r0, [pc, #84]	; (8006660 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800660a:	f000 fd4a 	bl	80070a2 <USBD_GetEpDesc>
 800660e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006610:	2181      	movs	r1, #129	; 0x81
 8006612:	4813      	ldr	r0, [pc, #76]	; (8006660 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006614:	f000 fd45 	bl	80070a2 <USBD_GetEpDesc>
 8006618:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2210      	movs	r2, #16
 8006624:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d006      	beq.n	800663a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	2200      	movs	r2, #0
 8006630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006634:	711a      	strb	r2, [r3, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d006      	beq.n	800664e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006648:	711a      	strb	r2, [r3, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2243      	movs	r2, #67	; 0x43
 8006652:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006654:	4b02      	ldr	r3, [pc, #8]	; (8006660 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20000060 	.word	0x20000060

08006664 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800666c:	2182      	movs	r1, #130	; 0x82
 800666e:	4818      	ldr	r0, [pc, #96]	; (80066d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006670:	f000 fd17 	bl	80070a2 <USBD_GetEpDesc>
 8006674:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006676:	2101      	movs	r1, #1
 8006678:	4815      	ldr	r0, [pc, #84]	; (80066d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800667a:	f000 fd12 	bl	80070a2 <USBD_GetEpDesc>
 800667e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006680:	2181      	movs	r1, #129	; 0x81
 8006682:	4813      	ldr	r0, [pc, #76]	; (80066d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006684:	f000 fd0d 	bl	80070a2 <USBD_GetEpDesc>
 8006688:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2210      	movs	r2, #16
 8006694:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d006      	beq.n	80066aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	2200      	movs	r2, #0
 80066a0:	711a      	strb	r2, [r3, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f042 0202 	orr.w	r2, r2, #2
 80066a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d006      	beq.n	80066be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	711a      	strb	r2, [r3, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f042 0202 	orr.w	r2, r2, #2
 80066bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2243      	movs	r2, #67	; 0x43
 80066c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066c4:	4b02      	ldr	r3, [pc, #8]	; (80066d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000060 	.word	0x20000060

080066d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066dc:	2182      	movs	r1, #130	; 0x82
 80066de:	4818      	ldr	r0, [pc, #96]	; (8006740 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80066e0:	f000 fcdf 	bl	80070a2 <USBD_GetEpDesc>
 80066e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066e6:	2101      	movs	r1, #1
 80066e8:	4815      	ldr	r0, [pc, #84]	; (8006740 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80066ea:	f000 fcda 	bl	80070a2 <USBD_GetEpDesc>
 80066ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066f0:	2181      	movs	r1, #129	; 0x81
 80066f2:	4813      	ldr	r0, [pc, #76]	; (8006740 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80066f4:	f000 fcd5 	bl	80070a2 <USBD_GetEpDesc>
 80066f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	2210      	movs	r2, #16
 8006704:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d006      	beq.n	800671a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2200      	movs	r2, #0
 8006710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006714:	711a      	strb	r2, [r3, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d006      	beq.n	800672e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006728:	711a      	strb	r2, [r3, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2243      	movs	r2, #67	; 0x43
 8006732:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006734:	4b02      	ldr	r3, [pc, #8]	; (8006740 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000060 	.word	0x20000060

08006744 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	220a      	movs	r2, #10
 8006750:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006752:	4b03      	ldr	r3, [pc, #12]	; (8006760 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	2000001c 	.word	0x2000001c

08006764 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006774:	2303      	movs	r3, #3
 8006776:	e009      	b.n	800678c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	33b0      	adds	r3, #176	; 0xb0
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	32b0      	adds	r2, #176	; 0xb0
 80067ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e008      	b.n	80067d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	371c      	adds	r7, #28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	32b0      	adds	r2, #176	; 0xb0
 80067f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e004      	b.n	800680a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
	...

08006818 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	32b0      	adds	r2, #176	; 0xb0
 800682a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006830:	2301      	movs	r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	32b0      	adds	r2, #176	; 0xb0
 800683e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006846:	2303      	movs	r3, #3
 8006848:	e025      	b.n	8006896 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006850:	2b00      	cmp	r3, #0
 8006852:	d11f      	bne.n	8006894 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2201      	movs	r2, #1
 8006858:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800685c:	4b10      	ldr	r3, [pc, #64]	; (80068a0 <USBD_CDC_TransmitPacket+0x88>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	f003 020f 	and.w	r2, r3, #15
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4403      	add	r3, r0
 8006876:	3318      	adds	r3, #24
 8006878:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800687a:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <USBD_CDC_TransmitPacket+0x88>)
 800687c:	7819      	ldrb	r1, [r3, #0]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f001 ffc5 	bl	800881a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006894:	7bfb      	ldrb	r3, [r7, #15]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	200000a3 	.word	0x200000a3

080068a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	32b0      	adds	r2, #176	; 0xb0
 80068b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	32b0      	adds	r2, #176	; 0xb0
 80068c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e018      	b.n	8006904 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	7c1b      	ldrb	r3, [r3, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10a      	bne.n	80068f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068da:	4b0c      	ldr	r3, [pc, #48]	; (800690c <USBD_CDC_ReceivePacket+0x68>)
 80068dc:	7819      	ldrb	r1, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 ffb7 	bl	800885c <USBD_LL_PrepareReceive>
 80068ee:	e008      	b.n	8006902 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068f0:	4b06      	ldr	r3, [pc, #24]	; (800690c <USBD_CDC_ReceivePacket+0x68>)
 80068f2:	7819      	ldrb	r1, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068fa:	2340      	movs	r3, #64	; 0x40
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f001 ffad 	bl	800885c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	200000a4 	.word	0x200000a4

08006910 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	4613      	mov	r3, r2
 800691c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006924:	2303      	movs	r3, #3
 8006926:	e01f      	b.n	8006968 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	79fa      	ldrb	r2, [r7, #7]
 800695a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f001 fe27 	bl	80085b0 <USBD_LL_Init>
 8006962:	4603      	mov	r3, r0
 8006964:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006984:	2303      	movs	r3, #3
 8006986:	e025      	b.n	80069d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32ae      	adds	r2, #174	; 0xae
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00f      	beq.n	80069c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	32ae      	adds	r2, #174	; 0xae
 80069ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	f107 020e 	add.w	r2, r7, #14
 80069b8:	4610      	mov	r0, r2
 80069ba:	4798      	blx	r3
 80069bc:	4602      	mov	r2, r0
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 fe2f 	bl	8008648 <USBD_LL_Start>
 80069ea:	4603      	mov	r3, r0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	460b      	mov	r3, r1
 8006a14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	78fa      	ldrb	r2, [r7, #3]
 8006a2e:	4611      	mov	r1, r2
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	4798      	blx	r3
 8006a34:	4603      	mov	r3, r0
 8006a36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	78fa      	ldrb	r2, [r7, #3]
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	4798      	blx	r3
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f001 f908 	bl	8007c9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d01a      	beq.n	8006ae8 <USBD_LL_SetupStage+0x72>
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d822      	bhi.n	8006afc <USBD_LL_SetupStage+0x86>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <USBD_LL_SetupStage+0x4a>
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d00a      	beq.n	8006ad4 <USBD_LL_SetupStage+0x5e>
 8006abe:	e01d      	b.n	8006afc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fb5f 	bl	800718c <USBD_StdDevReq>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad2:	e020      	b.n	8006b16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fbc7 	bl	8007270 <USBD_StdItfReq>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae6:	e016      	b.n	8006b16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fc29 	bl	8007348 <USBD_StdEPReq>
 8006af6:	4603      	mov	r3, r0
 8006af8:	73fb      	strb	r3, [r7, #15]
      break;
 8006afa:	e00c      	b.n	8006b16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 fdfc 	bl	8008708 <USBD_LL_StallEP>
 8006b10:	4603      	mov	r3, r0
 8006b12:	73fb      	strb	r3, [r7, #15]
      break;
 8006b14:	bf00      	nop
  }

  return ret;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006b32:	7afb      	ldrb	r3, [r7, #11]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d16e      	bne.n	8006c16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	f040 8098 	bne.w	8006c7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	689a      	ldr	r2, [r3, #8]
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d913      	bls.n	8006b80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	1ad2      	subs	r2, r2, r3
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	bf28      	it	cs
 8006b72:	4613      	movcs	r3, r2
 8006b74:	461a      	mov	r2, r3
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f001 f984 	bl	8007e86 <USBD_CtlContinueRx>
 8006b7e:	e07d      	b.n	8006c7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b86:	f003 031f 	and.w	r3, r3, #31
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d014      	beq.n	8006bb8 <USBD_LL_DataOutStage+0x98>
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d81d      	bhi.n	8006bce <USBD_LL_DataOutStage+0xae>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <USBD_LL_DataOutStage+0x7c>
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d003      	beq.n	8006ba2 <USBD_LL_DataOutStage+0x82>
 8006b9a:	e018      	b.n	8006bce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	75bb      	strb	r3, [r7, #22]
            break;
 8006ba0:	e018      	b.n	8006bd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	4619      	mov	r1, r3
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 fa5e 	bl	800706e <USBD_CoreFindIF>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75bb      	strb	r3, [r7, #22]
            break;
 8006bb6:	e00d      	b.n	8006bd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 fa60 	bl	8007088 <USBD_CoreFindEP>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	75bb      	strb	r3, [r7, #22]
            break;
 8006bcc:	e002      	b.n	8006bd4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	75bb      	strb	r3, [r7, #22]
            break;
 8006bd2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006bd4:	7dbb      	ldrb	r3, [r7, #22]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d119      	bne.n	8006c0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d113      	bne.n	8006c0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006be6:	7dba      	ldrb	r2, [r7, #22]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	32ae      	adds	r2, #174	; 0xae
 8006bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00b      	beq.n	8006c0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006bf6:	7dba      	ldrb	r2, [r7, #22]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006bfe:	7dba      	ldrb	r2, [r7, #22]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	32ae      	adds	r2, #174	; 0xae
 8006c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f001 f94a 	bl	8007ea8 <USBD_CtlSendStatus>
 8006c14:	e032      	b.n	8006c7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006c16:	7afb      	ldrb	r3, [r7, #11]
 8006c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	4619      	mov	r1, r3
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 fa31 	bl	8007088 <USBD_CoreFindEP>
 8006c26:	4603      	mov	r3, r0
 8006c28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c2a:	7dbb      	ldrb	r3, [r7, #22]
 8006c2c:	2bff      	cmp	r3, #255	; 0xff
 8006c2e:	d025      	beq.n	8006c7c <USBD_LL_DataOutStage+0x15c>
 8006c30:	7dbb      	ldrb	r3, [r7, #22]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d122      	bne.n	8006c7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d117      	bne.n	8006c72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c42:	7dba      	ldrb	r2, [r7, #22]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	32ae      	adds	r2, #174	; 0xae
 8006c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00f      	beq.n	8006c72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006c52:	7dba      	ldrb	r2, [r7, #22]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006c5a:	7dba      	ldrb	r2, [r7, #22]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	32ae      	adds	r2, #174	; 0xae
 8006c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	7afa      	ldrb	r2, [r7, #11]
 8006c68:	4611      	mov	r1, r2
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	4798      	blx	r3
 8006c6e:	4603      	mov	r3, r0
 8006c70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	e000      	b.n	8006c7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3718      	adds	r7, #24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b086      	sub	sp, #24
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	460b      	mov	r3, r1
 8006c90:	607a      	str	r2, [r7, #4]
 8006c92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c94:	7afb      	ldrb	r3, [r7, #11]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d16f      	bne.n	8006d7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3314      	adds	r3, #20
 8006c9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d15a      	bne.n	8006d60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d914      	bls.n	8006ce0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	1ad2      	subs	r2, r2, r3
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f001 f8ac 	bl	8007e2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f001 fdbf 	bl	800885c <USBD_LL_PrepareReceive>
 8006cde:	e03f      	b.n	8006d60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d11c      	bne.n	8006d26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d316      	bcc.n	8006d26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d20f      	bcs.n	8006d26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d06:	2200      	movs	r2, #0
 8006d08:	2100      	movs	r1, #0
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f001 f88d 	bl	8007e2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d18:	2300      	movs	r3, #0
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f001 fd9c 	bl	800885c <USBD_LL_PrepareReceive>
 8006d24:	e01c      	b.n	8006d60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d10f      	bne.n	8006d52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d009      	beq.n	8006d52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d52:	2180      	movs	r1, #128	; 0x80
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f001 fcd7 	bl	8008708 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f001 f8b7 	bl	8007ece <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d03a      	beq.n	8006de0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f7ff fe42 	bl	80069f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d78:	e032      	b.n	8006de0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006d7a:	7afb      	ldrb	r3, [r7, #11]
 8006d7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	4619      	mov	r1, r3
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 f97f 	bl	8007088 <USBD_CoreFindEP>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	2bff      	cmp	r3, #255	; 0xff
 8006d92:	d025      	beq.n	8006de0 <USBD_LL_DataInStage+0x15a>
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d122      	bne.n	8006de0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d11c      	bne.n	8006de0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006da6:	7dfa      	ldrb	r2, [r7, #23]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	32ae      	adds	r2, #174	; 0xae
 8006dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d014      	beq.n	8006de0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006db6:	7dfa      	ldrb	r2, [r7, #23]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006dbe:	7dfa      	ldrb	r2, [r7, #23]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	32ae      	adds	r2, #174	; 0xae
 8006dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	7afa      	ldrb	r2, [r7, #11]
 8006dcc:	4611      	mov	r1, r2
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	4798      	blx	r3
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006dd6:	7dbb      	ldrb	r3, [r7, #22]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006ddc:	7dbb      	ldrb	r3, [r7, #22]
 8006dde:	e000      	b.n	8006de2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d014      	beq.n	8006e50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00e      	beq.n	8006e50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6852      	ldr	r2, [r2, #4]
 8006e3e:	b2d2      	uxtb	r2, r2
 8006e40:	4611      	mov	r1, r2
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	4798      	blx	r3
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e50:	2340      	movs	r3, #64	; 0x40
 8006e52:	2200      	movs	r2, #0
 8006e54:	2100      	movs	r1, #0
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 fc11 	bl	800867e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2240      	movs	r2, #64	; 0x40
 8006e68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e6c:	2340      	movs	r3, #64	; 0x40
 8006e6e:	2200      	movs	r2, #0
 8006e70:	2180      	movs	r1, #128	; 0x80
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 fc03 	bl	800867e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2240      	movs	r2, #64	; 0x40
 8006e82:	621a      	str	r2, [r3, #32]

  return ret;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	460b      	mov	r3, r1
 8006e98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	78fa      	ldrb	r2, [r7, #3]
 8006e9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d106      	bne.n	8006efc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b082      	sub	sp, #8
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d110      	bne.n	8006f40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	460b      	mov	r3, r1
 8006f54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	32ae      	adds	r2, #174	; 0xae
 8006f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e01c      	b.n	8006fa6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d115      	bne.n	8006fa4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	32ae      	adds	r2, #174	; 0xae
 8006f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	32ae      	adds	r2, #174	; 0xae
 8006f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	32ae      	adds	r2, #174	; 0xae
 8006fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e01c      	b.n	800700a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	d115      	bne.n	8007008 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	32ae      	adds	r2, #174	; 0xae
 8006fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00b      	beq.n	8007008 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	32ae      	adds	r2, #174	; 0xae
 8006ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	78fa      	ldrb	r2, [r7, #3]
 8007002:	4611      	mov	r1, r2
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00e      	beq.n	8007064 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	6852      	ldr	r2, [r2, #4]
 8007052:	b2d2      	uxtb	r2, r2
 8007054:	4611      	mov	r1, r2
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	4798      	blx	r3
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007060:	2303      	movs	r3, #3
 8007062:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	460b      	mov	r3, r1
 8007078:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800707a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	460b      	mov	r3, r1
 8007092:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007094:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007096:	4618      	mov	r0, r3
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b086      	sub	sp, #24
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	460b      	mov	r3, r1
 80070ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	885b      	ldrh	r3, [r3, #2]
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d920      	bls.n	800710c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80070d2:	e013      	b.n	80070fc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80070d4:	f107 030a 	add.w	r3, r7, #10
 80070d8:	4619      	mov	r1, r3
 80070da:	6978      	ldr	r0, [r7, #20]
 80070dc:	f000 f81b 	bl	8007116 <USBD_GetNextDesc>
 80070e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	785b      	ldrb	r3, [r3, #1]
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	d108      	bne.n	80070fc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	789b      	ldrb	r3, [r3, #2]
 80070f2:	78fa      	ldrb	r2, [r7, #3]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d008      	beq.n	800710a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	885b      	ldrh	r3, [r3, #2]
 8007100:	b29a      	uxth	r2, r3
 8007102:	897b      	ldrh	r3, [r7, #10]
 8007104:	429a      	cmp	r2, r3
 8007106:	d8e5      	bhi.n	80070d4 <USBD_GetEpDesc+0x32>
 8007108:	e000      	b.n	800710c <USBD_GetEpDesc+0x6a>
          break;
 800710a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800710c:	693b      	ldr	r3, [r7, #16]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007116:	b480      	push	{r7}
 8007118:	b085      	sub	sp, #20
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	881a      	ldrh	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	b29b      	uxth	r3, r3
 800712e:	4413      	add	r3, r2
 8007130:	b29a      	uxth	r2, r3
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4413      	add	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007142:	68fb      	ldr	r3, [r7, #12]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	3301      	adds	r3, #1
 8007166:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800716e:	8a3b      	ldrh	r3, [r7, #16]
 8007170:	021b      	lsls	r3, r3, #8
 8007172:	b21a      	sxth	r2, r3
 8007174:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007178:	4313      	orrs	r3, r2
 800717a:	b21b      	sxth	r3, r3
 800717c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800717e:	89fb      	ldrh	r3, [r7, #14]
}
 8007180:	4618      	mov	r0, r3
 8007182:	371c      	adds	r7, #28
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a2:	2b40      	cmp	r3, #64	; 0x40
 80071a4:	d005      	beq.n	80071b2 <USBD_StdDevReq+0x26>
 80071a6:	2b40      	cmp	r3, #64	; 0x40
 80071a8:	d857      	bhi.n	800725a <USBD_StdDevReq+0xce>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00f      	beq.n	80071ce <USBD_StdDevReq+0x42>
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d153      	bne.n	800725a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	32ae      	adds	r2, #174	; 0xae
 80071bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
      break;
 80071cc:	e04a      	b.n	8007264 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b09      	cmp	r3, #9
 80071d4:	d83b      	bhi.n	800724e <USBD_StdDevReq+0xc2>
 80071d6:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <USBD_StdDevReq+0x50>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	08007231 	.word	0x08007231
 80071e0:	08007245 	.word	0x08007245
 80071e4:	0800724f 	.word	0x0800724f
 80071e8:	0800723b 	.word	0x0800723b
 80071ec:	0800724f 	.word	0x0800724f
 80071f0:	0800720f 	.word	0x0800720f
 80071f4:	08007205 	.word	0x08007205
 80071f8:	0800724f 	.word	0x0800724f
 80071fc:	08007227 	.word	0x08007227
 8007200:	08007219 	.word	0x08007219
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa3c 	bl	8007684 <USBD_GetDescriptor>
          break;
 800720c:	e024      	b.n	8007258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fba1 	bl	8007958 <USBD_SetAddress>
          break;
 8007216:	e01f      	b.n	8007258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fbe0 	bl	80079e0 <USBD_SetConfig>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]
          break;
 8007224:	e018      	b.n	8007258 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fc83 	bl	8007b34 <USBD_GetConfig>
          break;
 800722e:	e013      	b.n	8007258 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fcb4 	bl	8007ba0 <USBD_GetStatus>
          break;
 8007238:	e00e      	b.n	8007258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fce3 	bl	8007c08 <USBD_SetFeature>
          break;
 8007242:	e009      	b.n	8007258 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fd07 	bl	8007c5a <USBD_ClrFeature>
          break;
 800724c:	e004      	b.n	8007258 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fd5e 	bl	8007d12 <USBD_CtlError>
          break;
 8007256:	bf00      	nop
      }
      break;
 8007258:	e004      	b.n	8007264 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fd58 	bl	8007d12 <USBD_CtlError>
      break;
 8007262:	bf00      	nop
  }

  return ret;
 8007264:	7bfb      	ldrb	r3, [r7, #15]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop

08007270 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007286:	2b40      	cmp	r3, #64	; 0x40
 8007288:	d005      	beq.n	8007296 <USBD_StdItfReq+0x26>
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d852      	bhi.n	8007334 <USBD_StdItfReq+0xc4>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <USBD_StdItfReq+0x26>
 8007292:	2b20      	cmp	r3, #32
 8007294:	d14e      	bne.n	8007334 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729c:	b2db      	uxtb	r3, r3
 800729e:	3b01      	subs	r3, #1
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d840      	bhi.n	8007326 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	889b      	ldrh	r3, [r3, #4]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d836      	bhi.n	800731c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	889b      	ldrh	r3, [r3, #4]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff fed9 	bl	800706e <USBD_CoreFindIF>
 80072bc:	4603      	mov	r3, r0
 80072be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	2bff      	cmp	r3, #255	; 0xff
 80072c4:	d01d      	beq.n	8007302 <USBD_StdItfReq+0x92>
 80072c6:	7bbb      	ldrb	r3, [r7, #14]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d11a      	bne.n	8007302 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80072cc:	7bba      	ldrb	r2, [r7, #14]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	32ae      	adds	r2, #174	; 0xae
 80072d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00f      	beq.n	80072fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80072dc:	7bba      	ldrb	r2, [r7, #14]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072e4:	7bba      	ldrb	r2, [r7, #14]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	32ae      	adds	r2, #174	; 0xae
 80072ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
 80072f6:	4603      	mov	r3, r0
 80072f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80072fa:	e004      	b.n	8007306 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80072fc:	2303      	movs	r3, #3
 80072fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007300:	e001      	b.n	8007306 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007302:	2303      	movs	r3, #3
 8007304:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	88db      	ldrh	r3, [r3, #6]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d110      	bne.n	8007330 <USBD_StdItfReq+0xc0>
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10d      	bne.n	8007330 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fdc7 	bl	8007ea8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800731a:	e009      	b.n	8007330 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fcf7 	bl	8007d12 <USBD_CtlError>
          break;
 8007324:	e004      	b.n	8007330 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fcf2 	bl	8007d12 <USBD_CtlError>
          break;
 800732e:	e000      	b.n	8007332 <USBD_StdItfReq+0xc2>
          break;
 8007330:	bf00      	nop
      }
      break;
 8007332:	e004      	b.n	800733e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fceb 	bl	8007d12 <USBD_CtlError>
      break;
 800733c:	bf00      	nop
  }

  return ret;
 800733e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	889b      	ldrh	r3, [r3, #4]
 800735a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007364:	2b40      	cmp	r3, #64	; 0x40
 8007366:	d007      	beq.n	8007378 <USBD_StdEPReq+0x30>
 8007368:	2b40      	cmp	r3, #64	; 0x40
 800736a:	f200 817f 	bhi.w	800766c <USBD_StdEPReq+0x324>
 800736e:	2b00      	cmp	r3, #0
 8007370:	d02a      	beq.n	80073c8 <USBD_StdEPReq+0x80>
 8007372:	2b20      	cmp	r3, #32
 8007374:	f040 817a 	bne.w	800766c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff fe83 	bl	8007088 <USBD_CoreFindEP>
 8007382:	4603      	mov	r3, r0
 8007384:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007386:	7b7b      	ldrb	r3, [r7, #13]
 8007388:	2bff      	cmp	r3, #255	; 0xff
 800738a:	f000 8174 	beq.w	8007676 <USBD_StdEPReq+0x32e>
 800738e:	7b7b      	ldrb	r3, [r7, #13]
 8007390:	2b00      	cmp	r3, #0
 8007392:	f040 8170 	bne.w	8007676 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007396:	7b7a      	ldrb	r2, [r7, #13]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800739e:	7b7a      	ldrb	r2, [r7, #13]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	32ae      	adds	r2, #174	; 0xae
 80073a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 8163 	beq.w	8007676 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80073b0:	7b7a      	ldrb	r2, [r7, #13]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	32ae      	adds	r2, #174	; 0xae
 80073b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	4798      	blx	r3
 80073c2:	4603      	mov	r3, r0
 80073c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073c6:	e156      	b.n	8007676 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	785b      	ldrb	r3, [r3, #1]
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d008      	beq.n	80073e2 <USBD_StdEPReq+0x9a>
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	f300 8145 	bgt.w	8007660 <USBD_StdEPReq+0x318>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 809b 	beq.w	8007512 <USBD_StdEPReq+0x1ca>
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d03c      	beq.n	800745a <USBD_StdEPReq+0x112>
 80073e0:	e13e      	b.n	8007660 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d002      	beq.n	80073f4 <USBD_StdEPReq+0xac>
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d016      	beq.n	8007420 <USBD_StdEPReq+0xd8>
 80073f2:	e02c      	b.n	800744e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00d      	beq.n	8007416 <USBD_StdEPReq+0xce>
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	2b80      	cmp	r3, #128	; 0x80
 80073fe:	d00a      	beq.n	8007416 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 f97f 	bl	8008708 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800740a:	2180      	movs	r1, #128	; 0x80
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f001 f97b 	bl	8008708 <USBD_LL_StallEP>
 8007412:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007414:	e020      	b.n	8007458 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fc7a 	bl	8007d12 <USBD_CtlError>
              break;
 800741e:	e01b      	b.n	8007458 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	885b      	ldrh	r3, [r3, #2]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10e      	bne.n	8007446 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00b      	beq.n	8007446 <USBD_StdEPReq+0xfe>
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b80      	cmp	r3, #128	; 0x80
 8007432:	d008      	beq.n	8007446 <USBD_StdEPReq+0xfe>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	88db      	ldrh	r3, [r3, #6]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d104      	bne.n	8007446 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f001 f961 	bl	8008708 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fd2e 	bl	8007ea8 <USBD_CtlSendStatus>

              break;
 800744c:	e004      	b.n	8007458 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fc5e 	bl	8007d12 <USBD_CtlError>
              break;
 8007456:	bf00      	nop
          }
          break;
 8007458:	e107      	b.n	800766a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b02      	cmp	r3, #2
 8007464:	d002      	beq.n	800746c <USBD_StdEPReq+0x124>
 8007466:	2b03      	cmp	r3, #3
 8007468:	d016      	beq.n	8007498 <USBD_StdEPReq+0x150>
 800746a:	e04b      	b.n	8007504 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00d      	beq.n	800748e <USBD_StdEPReq+0x146>
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	2b80      	cmp	r3, #128	; 0x80
 8007476:	d00a      	beq.n	800748e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 f943 	bl	8008708 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007482:	2180      	movs	r1, #128	; 0x80
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 f93f 	bl	8008708 <USBD_LL_StallEP>
 800748a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800748c:	e040      	b.n	8007510 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fc3e 	bl	8007d12 <USBD_CtlError>
              break;
 8007496:	e03b      	b.n	8007510 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	885b      	ldrh	r3, [r3, #2]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d136      	bne.n	800750e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d004      	beq.n	80074b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f001 f949 	bl	8008746 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fcf7 	bl	8007ea8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7ff fde2 	bl	8007088 <USBD_CoreFindEP>
 80074c4:	4603      	mov	r3, r0
 80074c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074c8:	7b7b      	ldrb	r3, [r7, #13]
 80074ca:	2bff      	cmp	r3, #255	; 0xff
 80074cc:	d01f      	beq.n	800750e <USBD_StdEPReq+0x1c6>
 80074ce:	7b7b      	ldrb	r3, [r7, #13]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d11c      	bne.n	800750e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80074d4:	7b7a      	ldrb	r2, [r7, #13]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80074dc:	7b7a      	ldrb	r2, [r7, #13]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	32ae      	adds	r2, #174	; 0xae
 80074e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d010      	beq.n	800750e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80074ec:	7b7a      	ldrb	r2, [r7, #13]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	32ae      	adds	r2, #174	; 0xae
 80074f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3
 80074fe:	4603      	mov	r3, r0
 8007500:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007502:	e004      	b.n	800750e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fc03 	bl	8007d12 <USBD_CtlError>
              break;
 800750c:	e000      	b.n	8007510 <USBD_StdEPReq+0x1c8>
              break;
 800750e:	bf00      	nop
          }
          break;
 8007510:	e0ab      	b.n	800766a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d002      	beq.n	8007524 <USBD_StdEPReq+0x1dc>
 800751e:	2b03      	cmp	r3, #3
 8007520:	d032      	beq.n	8007588 <USBD_StdEPReq+0x240>
 8007522:	e097      	b.n	8007654 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d007      	beq.n	800753a <USBD_StdEPReq+0x1f2>
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	2b80      	cmp	r3, #128	; 0x80
 800752e:	d004      	beq.n	800753a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fbed 	bl	8007d12 <USBD_CtlError>
                break;
 8007538:	e091      	b.n	800765e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800753a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800753e:	2b00      	cmp	r3, #0
 8007540:	da0b      	bge.n	800755a <USBD_StdEPReq+0x212>
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007548:	4613      	mov	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	3310      	adds	r3, #16
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	4413      	add	r3, r2
 8007556:	3304      	adds	r3, #4
 8007558:	e00b      	b.n	8007572 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800755a:	7bbb      	ldrb	r3, [r7, #14]
 800755c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007560:	4613      	mov	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	4413      	add	r3, r2
 8007570:	3304      	adds	r3, #4
 8007572:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2202      	movs	r2, #2
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fc37 	bl	8007df4 <USBD_CtlSendData>
              break;
 8007586:	e06a      	b.n	800765e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800758c:	2b00      	cmp	r3, #0
 800758e:	da11      	bge.n	80075b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	f003 020f 	and.w	r2, r3, #15
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	4613      	mov	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	3324      	adds	r3, #36	; 0x24
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d117      	bne.n	80075da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fbb0 	bl	8007d12 <USBD_CtlError>
                  break;
 80075b2:	e054      	b.n	800765e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	f003 020f 	and.w	r2, r3, #15
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	4613      	mov	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d104      	bne.n	80075da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fb9d 	bl	8007d12 <USBD_CtlError>
                  break;
 80075d8:	e041      	b.n	800765e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	da0b      	bge.n	80075fa <USBD_StdEPReq+0x2b2>
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	3310      	adds	r3, #16
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	4413      	add	r3, r2
 80075f6:	3304      	adds	r3, #4
 80075f8:	e00b      	b.n	8007612 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007600:	4613      	mov	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	4413      	add	r3, r2
 8007610:	3304      	adds	r3, #4
 8007612:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <USBD_StdEPReq+0x2d8>
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	2b80      	cmp	r3, #128	; 0x80
 800761e:	d103      	bne.n	8007628 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	e00e      	b.n	8007646 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 f8a9 	bl	8008784 <USBD_LL_IsStallEP>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d003      	beq.n	8007640 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2201      	movs	r2, #1
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	e002      	b.n	8007646 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2202      	movs	r2, #2
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fbd1 	bl	8007df4 <USBD_CtlSendData>
              break;
 8007652:	e004      	b.n	800765e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fb5b 	bl	8007d12 <USBD_CtlError>
              break;
 800765c:	bf00      	nop
          }
          break;
 800765e:	e004      	b.n	800766a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fb55 	bl	8007d12 <USBD_CtlError>
          break;
 8007668:	bf00      	nop
      }
      break;
 800766a:	e005      	b.n	8007678 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fb4f 	bl	8007d12 <USBD_CtlError>
      break;
 8007674:	e000      	b.n	8007678 <USBD_StdEPReq+0x330>
      break;
 8007676:	bf00      	nop
  }

  return ret;
 8007678:	7bfb      	ldrb	r3, [r7, #15]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
	...

08007684 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	885b      	ldrh	r3, [r3, #2]
 800769e:	0a1b      	lsrs	r3, r3, #8
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	2b06      	cmp	r3, #6
 80076a6:	f200 8128 	bhi.w	80078fa <USBD_GetDescriptor+0x276>
 80076aa:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <USBD_GetDescriptor+0x2c>)
 80076ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b0:	080076cd 	.word	0x080076cd
 80076b4:	080076e5 	.word	0x080076e5
 80076b8:	08007725 	.word	0x08007725
 80076bc:	080078fb 	.word	0x080078fb
 80076c0:	080078fb 	.word	0x080078fb
 80076c4:	0800789b 	.word	0x0800789b
 80076c8:	080078c7 	.word	0x080078c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	7c12      	ldrb	r2, [r2, #16]
 80076d8:	f107 0108 	add.w	r1, r7, #8
 80076dc:	4610      	mov	r0, r2
 80076de:	4798      	blx	r3
 80076e0:	60f8      	str	r0, [r7, #12]
      break;
 80076e2:	e112      	b.n	800790a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	7c1b      	ldrb	r3, [r3, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10d      	bne.n	8007708 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	f107 0208 	add.w	r2, r7, #8
 80076f8:	4610      	mov	r0, r2
 80076fa:	4798      	blx	r3
 80076fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3301      	adds	r3, #1
 8007702:	2202      	movs	r2, #2
 8007704:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007706:	e100      	b.n	800790a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	f107 0208 	add.w	r2, r7, #8
 8007714:	4610      	mov	r0, r2
 8007716:	4798      	blx	r3
 8007718:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3301      	adds	r3, #1
 800771e:	2202      	movs	r2, #2
 8007720:	701a      	strb	r2, [r3, #0]
      break;
 8007722:	e0f2      	b.n	800790a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	885b      	ldrh	r3, [r3, #2]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b05      	cmp	r3, #5
 800772c:	f200 80ac 	bhi.w	8007888 <USBD_GetDescriptor+0x204>
 8007730:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <USBD_GetDescriptor+0xb4>)
 8007732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007736:	bf00      	nop
 8007738:	08007751 	.word	0x08007751
 800773c:	08007785 	.word	0x08007785
 8007740:	080077b9 	.word	0x080077b9
 8007744:	080077ed 	.word	0x080077ed
 8007748:	08007821 	.word	0x08007821
 800774c:	08007855 	.word	0x08007855
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00b      	beq.n	8007774 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	7c12      	ldrb	r2, [r2, #16]
 8007768:	f107 0108 	add.w	r1, r7, #8
 800776c:	4610      	mov	r0, r2
 800776e:	4798      	blx	r3
 8007770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007772:	e091      	b.n	8007898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 facb 	bl	8007d12 <USBD_CtlError>
            err++;
 800777c:	7afb      	ldrb	r3, [r7, #11]
 800777e:	3301      	adds	r3, #1
 8007780:	72fb      	strb	r3, [r7, #11]
          break;
 8007782:	e089      	b.n	8007898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00b      	beq.n	80077a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	7c12      	ldrb	r2, [r2, #16]
 800779c:	f107 0108 	add.w	r1, r7, #8
 80077a0:	4610      	mov	r0, r2
 80077a2:	4798      	blx	r3
 80077a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077a6:	e077      	b.n	8007898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fab1 	bl	8007d12 <USBD_CtlError>
            err++;
 80077b0:	7afb      	ldrb	r3, [r7, #11]
 80077b2:	3301      	adds	r3, #1
 80077b4:	72fb      	strb	r3, [r7, #11]
          break;
 80077b6:	e06f      	b.n	8007898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	7c12      	ldrb	r2, [r2, #16]
 80077d0:	f107 0108 	add.w	r1, r7, #8
 80077d4:	4610      	mov	r0, r2
 80077d6:	4798      	blx	r3
 80077d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077da:	e05d      	b.n	8007898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa97 	bl	8007d12 <USBD_CtlError>
            err++;
 80077e4:	7afb      	ldrb	r3, [r7, #11]
 80077e6:	3301      	adds	r3, #1
 80077e8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ea:	e055      	b.n	8007898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00b      	beq.n	8007810 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	7c12      	ldrb	r2, [r2, #16]
 8007804:	f107 0108 	add.w	r1, r7, #8
 8007808:	4610      	mov	r0, r2
 800780a:	4798      	blx	r3
 800780c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800780e:	e043      	b.n	8007898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fa7d 	bl	8007d12 <USBD_CtlError>
            err++;
 8007818:	7afb      	ldrb	r3, [r7, #11]
 800781a:	3301      	adds	r3, #1
 800781c:	72fb      	strb	r3, [r7, #11]
          break;
 800781e:	e03b      	b.n	8007898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00b      	beq.n	8007844 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	7c12      	ldrb	r2, [r2, #16]
 8007838:	f107 0108 	add.w	r1, r7, #8
 800783c:	4610      	mov	r0, r2
 800783e:	4798      	blx	r3
 8007840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007842:	e029      	b.n	8007898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fa63 	bl	8007d12 <USBD_CtlError>
            err++;
 800784c:	7afb      	ldrb	r3, [r7, #11]
 800784e:	3301      	adds	r3, #1
 8007850:	72fb      	strb	r3, [r7, #11]
          break;
 8007852:	e021      	b.n	8007898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00b      	beq.n	8007878 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	7c12      	ldrb	r2, [r2, #16]
 800786c:	f107 0108 	add.w	r1, r7, #8
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
 8007874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007876:	e00f      	b.n	8007898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa49 	bl	8007d12 <USBD_CtlError>
            err++;
 8007880:	7afb      	ldrb	r3, [r7, #11]
 8007882:	3301      	adds	r3, #1
 8007884:	72fb      	strb	r3, [r7, #11]
          break;
 8007886:	e007      	b.n	8007898 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fa41 	bl	8007d12 <USBD_CtlError>
          err++;
 8007890:	7afb      	ldrb	r3, [r7, #11]
 8007892:	3301      	adds	r3, #1
 8007894:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007896:	bf00      	nop
      }
      break;
 8007898:	e037      	b.n	800790a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7c1b      	ldrb	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d109      	bne.n	80078b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078aa:	f107 0208 	add.w	r2, r7, #8
 80078ae:	4610      	mov	r0, r2
 80078b0:	4798      	blx	r3
 80078b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078b4:	e029      	b.n	800790a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fa2a 	bl	8007d12 <USBD_CtlError>
        err++;
 80078be:	7afb      	ldrb	r3, [r7, #11]
 80078c0:	3301      	adds	r3, #1
 80078c2:	72fb      	strb	r3, [r7, #11]
      break;
 80078c4:	e021      	b.n	800790a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	7c1b      	ldrb	r3, [r3, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10d      	bne.n	80078ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d6:	f107 0208 	add.w	r2, r7, #8
 80078da:	4610      	mov	r0, r2
 80078dc:	4798      	blx	r3
 80078de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3301      	adds	r3, #1
 80078e4:	2207      	movs	r2, #7
 80078e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078e8:	e00f      	b.n	800790a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fa10 	bl	8007d12 <USBD_CtlError>
        err++;
 80078f2:	7afb      	ldrb	r3, [r7, #11]
 80078f4:	3301      	adds	r3, #1
 80078f6:	72fb      	strb	r3, [r7, #11]
      break;
 80078f8:	e007      	b.n	800790a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fa08 	bl	8007d12 <USBD_CtlError>
      err++;
 8007902:	7afb      	ldrb	r3, [r7, #11]
 8007904:	3301      	adds	r3, #1
 8007906:	72fb      	strb	r3, [r7, #11]
      break;
 8007908:	bf00      	nop
  }

  if (err != 0U)
 800790a:	7afb      	ldrb	r3, [r7, #11]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d11e      	bne.n	800794e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	88db      	ldrh	r3, [r3, #6]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d016      	beq.n	8007946 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007918:	893b      	ldrh	r3, [r7, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00e      	beq.n	800793c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	88da      	ldrh	r2, [r3, #6]
 8007922:	893b      	ldrh	r3, [r7, #8]
 8007924:	4293      	cmp	r3, r2
 8007926:	bf28      	it	cs
 8007928:	4613      	movcs	r3, r2
 800792a:	b29b      	uxth	r3, r3
 800792c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800792e:	893b      	ldrh	r3, [r7, #8]
 8007930:	461a      	mov	r2, r3
 8007932:	68f9      	ldr	r1, [r7, #12]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fa5d 	bl	8007df4 <USBD_CtlSendData>
 800793a:	e009      	b.n	8007950 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f9e7 	bl	8007d12 <USBD_CtlError>
 8007944:	e004      	b.n	8007950 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 faae 	bl	8007ea8 <USBD_CtlSendStatus>
 800794c:	e000      	b.n	8007950 <USBD_GetDescriptor+0x2cc>
    return;
 800794e:	bf00      	nop
  }
}
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop

08007958 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	889b      	ldrh	r3, [r3, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d131      	bne.n	80079ce <USBD_SetAddress+0x76>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	88db      	ldrh	r3, [r3, #6]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d12d      	bne.n	80079ce <USBD_SetAddress+0x76>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	885b      	ldrh	r3, [r3, #2]
 8007976:	2b7f      	cmp	r3, #127	; 0x7f
 8007978:	d829      	bhi.n	80079ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	885b      	ldrh	r3, [r3, #2]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007984:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b03      	cmp	r3, #3
 8007990:	d104      	bne.n	800799c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f9bc 	bl	8007d12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800799a:	e01d      	b.n	80079d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	7bfa      	ldrb	r2, [r7, #15]
 80079a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 ff17 	bl	80087dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa7a 	bl	8007ea8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d004      	beq.n	80079c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2202      	movs	r2, #2
 80079be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c2:	e009      	b.n	80079d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079cc:	e004      	b.n	80079d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f99e 	bl	8007d12 <USBD_CtlError>
  }
}
 80079d6:	bf00      	nop
 80079d8:	bf00      	nop
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	885b      	ldrh	r3, [r3, #2]
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	4b4e      	ldr	r3, [pc, #312]	; (8007b30 <USBD_SetConfig+0x150>)
 80079f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079f8:	4b4d      	ldr	r3, [pc, #308]	; (8007b30 <USBD_SetConfig+0x150>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d905      	bls.n	8007a0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f985 	bl	8007d12 <USBD_CtlError>
    return USBD_FAIL;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e08c      	b.n	8007b26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d002      	beq.n	8007a1e <USBD_SetConfig+0x3e>
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d029      	beq.n	8007a70 <USBD_SetConfig+0x90>
 8007a1c:	e075      	b.n	8007b0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a1e:	4b44      	ldr	r3, [pc, #272]	; (8007b30 <USBD_SetConfig+0x150>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d020      	beq.n	8007a68 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007a26:	4b42      	ldr	r3, [pc, #264]	; (8007b30 <USBD_SetConfig+0x150>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a30:	4b3f      	ldr	r3, [pc, #252]	; (8007b30 <USBD_SetConfig+0x150>)
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fe ffe7 	bl	8006a0a <USBD_SetClassConfig>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d008      	beq.n	8007a58 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f962 	bl	8007d12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2202      	movs	r2, #2
 8007a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a56:	e065      	b.n	8007b24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fa25 	bl	8007ea8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2203      	movs	r2, #3
 8007a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a66:	e05d      	b.n	8007b24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fa1d 	bl	8007ea8 <USBD_CtlSendStatus>
      break;
 8007a6e:	e059      	b.n	8007b24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a70:	4b2f      	ldr	r3, [pc, #188]	; (8007b30 <USBD_SetConfig+0x150>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d112      	bne.n	8007a9e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007a80:	4b2b      	ldr	r3, [pc, #172]	; (8007b30 <USBD_SetConfig+0x150>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	461a      	mov	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a8a:	4b29      	ldr	r3, [pc, #164]	; (8007b30 <USBD_SetConfig+0x150>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7fe ffd6 	bl	8006a42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fa06 	bl	8007ea8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a9c:	e042      	b.n	8007b24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a9e:	4b24      	ldr	r3, [pc, #144]	; (8007b30 <USBD_SetConfig+0x150>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d02a      	beq.n	8007b02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7fe ffc4 	bl	8006a42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007aba:	4b1d      	ldr	r3, [pc, #116]	; (8007b30 <USBD_SetConfig+0x150>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ac4:	4b1a      	ldr	r3, [pc, #104]	; (8007b30 <USBD_SetConfig+0x150>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7fe ff9d 	bl	8006a0a <USBD_SetClassConfig>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00f      	beq.n	8007afa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f918 	bl	8007d12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7fe ffa9 	bl	8006a42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007af8:	e014      	b.n	8007b24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f9d4 	bl	8007ea8 <USBD_CtlSendStatus>
      break;
 8007b00:	e010      	b.n	8007b24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f9d0 	bl	8007ea8 <USBD_CtlSendStatus>
      break;
 8007b08:	e00c      	b.n	8007b24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f900 	bl	8007d12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b12:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <USBD_SetConfig+0x150>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7fe ff92 	bl	8006a42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	73fb      	strb	r3, [r7, #15]
      break;
 8007b22:	bf00      	nop
  }

  return ret;
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000208 	.word	0x20000208

08007b34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	88db      	ldrh	r3, [r3, #6]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d004      	beq.n	8007b50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f8e2 	bl	8007d12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b4e:	e023      	b.n	8007b98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	dc02      	bgt.n	8007b62 <USBD_GetConfig+0x2e>
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	dc03      	bgt.n	8007b68 <USBD_GetConfig+0x34>
 8007b60:	e015      	b.n	8007b8e <USBD_GetConfig+0x5a>
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d00b      	beq.n	8007b7e <USBD_GetConfig+0x4a>
 8007b66:	e012      	b.n	8007b8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3308      	adds	r3, #8
 8007b72:	2201      	movs	r2, #1
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f93c 	bl	8007df4 <USBD_CtlSendData>
        break;
 8007b7c:	e00c      	b.n	8007b98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3304      	adds	r3, #4
 8007b82:	2201      	movs	r2, #1
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f934 	bl	8007df4 <USBD_CtlSendData>
        break;
 8007b8c:	e004      	b.n	8007b98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f8be 	bl	8007d12 <USBD_CtlError>
        break;
 8007b96:	bf00      	nop
}
 8007b98:	bf00      	nop
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d81e      	bhi.n	8007bf6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	88db      	ldrh	r3, [r3, #6]
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d004      	beq.n	8007bca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f8a5 	bl	8007d12 <USBD_CtlError>
        break;
 8007bc8:	e01a      	b.n	8007c00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d005      	beq.n	8007be6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f043 0202 	orr.w	r2, r3, #2
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	330c      	adds	r3, #12
 8007bea:	2202      	movs	r2, #2
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f900 	bl	8007df4 <USBD_CtlSendData>
      break;
 8007bf4:	e004      	b.n	8007c00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f88a 	bl	8007d12 <USBD_CtlError>
      break;
 8007bfe:	bf00      	nop
  }
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	885b      	ldrh	r3, [r3, #2]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d107      	bne.n	8007c2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f940 	bl	8007ea8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007c28:	e013      	b.n	8007c52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	885b      	ldrh	r3, [r3, #2]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d10b      	bne.n	8007c4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	889b      	ldrh	r3, [r3, #4]
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f930 	bl	8007ea8 <USBD_CtlSendStatus>
}
 8007c48:	e003      	b.n	8007c52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f860 	bl	8007d12 <USBD_CtlError>
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d80b      	bhi.n	8007c8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	885b      	ldrh	r3, [r3, #2]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d10c      	bne.n	8007c94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f910 	bl	8007ea8 <USBD_CtlSendStatus>
      }
      break;
 8007c88:	e004      	b.n	8007c94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f840 	bl	8007d12 <USBD_CtlError>
      break;
 8007c92:	e000      	b.n	8007c96 <USBD_ClrFeature+0x3c>
      break;
 8007c94:	bf00      	nop
  }
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	781a      	ldrb	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	781a      	ldrb	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f7ff fa41 	bl	8007150 <SWAPBYTE>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f7ff fa34 	bl	8007150 <SWAPBYTE>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	461a      	mov	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f7ff fa27 	bl	8007150 <SWAPBYTE>
 8007d02:	4603      	mov	r3, r0
 8007d04:	461a      	mov	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	80da      	strh	r2, [r3, #6]
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d1c:	2180      	movs	r1, #128	; 0x80
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fcf2 	bl	8008708 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d24:	2100      	movs	r1, #0
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fcee 	bl	8008708 <USBD_LL_StallEP>
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d036      	beq.n	8007db8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d4e:	6938      	ldr	r0, [r7, #16]
 8007d50:	f000 f836 	bl	8007dc0 <USBD_GetLen>
 8007d54:	4603      	mov	r3, r0
 8007d56:	3301      	adds	r3, #1
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	4413      	add	r3, r2
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	7812      	ldrb	r2, [r2, #0]
 8007d6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	3301      	adds	r3, #1
 8007d72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	4413      	add	r3, r2
 8007d7a:	2203      	movs	r2, #3
 8007d7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	3301      	adds	r3, #1
 8007d82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d84:	e013      	b.n	8007dae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	7812      	ldrb	r2, [r2, #0]
 8007d90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	3301      	adds	r3, #1
 8007d96:	613b      	str	r3, [r7, #16]
    idx++;
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	4413      	add	r3, r2
 8007da4:	2200      	movs	r2, #0
 8007da6:	701a      	strb	r2, [r3, #0]
    idx++;
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	3301      	adds	r3, #1
 8007dac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e7      	bne.n	8007d86 <USBD_GetString+0x52>
 8007db6:	e000      	b.n	8007dba <USBD_GetString+0x86>
    return;
 8007db8:	bf00      	nop
  }
}
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007dd0:	e005      	b.n	8007dde <USBD_GetLen+0x1e>
  {
    len++;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1f5      	bne.n	8007dd2 <USBD_GetLen+0x12>
  }

  return len;
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2202      	movs	r2, #2
 8007e04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	2100      	movs	r1, #0
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 fcfd 	bl	800881a <USBD_LL_Transmit>

  return USBD_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fcec 	bl	800881a <USBD_LL_Transmit>

  return USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2203      	movs	r2, #3
 8007e5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	2100      	movs	r1, #0
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f000 fcf0 	bl	800885c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	2100      	movs	r1, #0
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 fcdf 	bl	800885c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2204      	movs	r2, #4
 8007eb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007eb8:	2300      	movs	r3, #0
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fcab 	bl	800881a <USBD_LL_Transmit>

  return USBD_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2205      	movs	r2, #5
 8007eda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ede:	2300      	movs	r3, #0
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fcb9 	bl	800885c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <MX_USB_DEVICE_Init>:
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	2200      	movs	r2, #0
 8007efa:	4912      	ldr	r1, [pc, #72]	; (8007f44 <MX_USB_DEVICE_Init+0x50>)
 8007efc:	4812      	ldr	r0, [pc, #72]	; (8007f48 <MX_USB_DEVICE_Init+0x54>)
 8007efe:	f7fe fd07 	bl	8006910 <USBD_Init>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <MX_USB_DEVICE_Init+0x18>
 8007f08:	f7f8 fdf2 	bl	8000af0 <Error_Handler>
 8007f0c:	490f      	ldr	r1, [pc, #60]	; (8007f4c <MX_USB_DEVICE_Init+0x58>)
 8007f0e:	480e      	ldr	r0, [pc, #56]	; (8007f48 <MX_USB_DEVICE_Init+0x54>)
 8007f10:	f7fe fd2e 	bl	8006970 <USBD_RegisterClass>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <MX_USB_DEVICE_Init+0x2a>
 8007f1a:	f7f8 fde9 	bl	8000af0 <Error_Handler>
 8007f1e:	490c      	ldr	r1, [pc, #48]	; (8007f50 <MX_USB_DEVICE_Init+0x5c>)
 8007f20:	4809      	ldr	r0, [pc, #36]	; (8007f48 <MX_USB_DEVICE_Init+0x54>)
 8007f22:	f7fe fc1f 	bl	8006764 <USBD_CDC_RegisterInterface>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <MX_USB_DEVICE_Init+0x3c>
 8007f2c:	f7f8 fde0 	bl	8000af0 <Error_Handler>
 8007f30:	4805      	ldr	r0, [pc, #20]	; (8007f48 <MX_USB_DEVICE_Init+0x54>)
 8007f32:	f7fe fd53 	bl	80069dc <USBD_Start>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <MX_USB_DEVICE_Init+0x4c>
 8007f3c:	f7f8 fdd8 	bl	8000af0 <Error_Handler>
 8007f40:	bf00      	nop
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	200000bc 	.word	0x200000bc
 8007f48:	2000020c 	.word	0x2000020c
 8007f4c:	20000028 	.word	0x20000028
 8007f50:	200000a8 	.word	0x200000a8

08007f54 <CDC_Init_FS>:
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4905      	ldr	r1, [pc, #20]	; (8007f70 <CDC_Init_FS+0x1c>)
 8007f5c:	4805      	ldr	r0, [pc, #20]	; (8007f74 <CDC_Init_FS+0x20>)
 8007f5e:	f7fe fc1b 	bl	8006798 <USBD_CDC_SetTxBuffer>
 8007f62:	4905      	ldr	r1, [pc, #20]	; (8007f78 <CDC_Init_FS+0x24>)
 8007f64:	4803      	ldr	r0, [pc, #12]	; (8007f74 <CDC_Init_FS+0x20>)
 8007f66:	f7fe fc39 	bl	80067dc <USBD_CDC_SetRxBuffer>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20000ce8 	.word	0x20000ce8
 8007f74:	2000020c 	.word	0x2000020c
 8007f78:	200004e8 	.word	0x200004e8

08007f7c <CDC_DeInit_FS>:
 8007f7c:	b480      	push	{r7}
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	2300      	movs	r3, #0
 8007f82:	4618      	mov	r0, r3
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <CDC_Control_FS>:
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	4603      	mov	r3, r0
 8007f94:	6039      	str	r1, [r7, #0]
 8007f96:	71fb      	strb	r3, [r7, #7]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	80bb      	strh	r3, [r7, #4]
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	2b23      	cmp	r3, #35	; 0x23
 8007fa0:	d84a      	bhi.n	8008038 <CDC_Control_FS+0xac>
 8007fa2:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <CDC_Control_FS+0x1c>)
 8007fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa8:	08008039 	.word	0x08008039
 8007fac:	08008039 	.word	0x08008039
 8007fb0:	08008039 	.word	0x08008039
 8007fb4:	08008039 	.word	0x08008039
 8007fb8:	08008039 	.word	0x08008039
 8007fbc:	08008039 	.word	0x08008039
 8007fc0:	08008039 	.word	0x08008039
 8007fc4:	08008039 	.word	0x08008039
 8007fc8:	08008039 	.word	0x08008039
 8007fcc:	08008039 	.word	0x08008039
 8007fd0:	08008039 	.word	0x08008039
 8007fd4:	08008039 	.word	0x08008039
 8007fd8:	08008039 	.word	0x08008039
 8007fdc:	08008039 	.word	0x08008039
 8007fe0:	08008039 	.word	0x08008039
 8007fe4:	08008039 	.word	0x08008039
 8007fe8:	08008039 	.word	0x08008039
 8007fec:	08008039 	.word	0x08008039
 8007ff0:	08008039 	.word	0x08008039
 8007ff4:	08008039 	.word	0x08008039
 8007ff8:	08008039 	.word	0x08008039
 8007ffc:	08008039 	.word	0x08008039
 8008000:	08008039 	.word	0x08008039
 8008004:	08008039 	.word	0x08008039
 8008008:	08008039 	.word	0x08008039
 800800c:	08008039 	.word	0x08008039
 8008010:	08008039 	.word	0x08008039
 8008014:	08008039 	.word	0x08008039
 8008018:	08008039 	.word	0x08008039
 800801c:	08008039 	.word	0x08008039
 8008020:	08008039 	.word	0x08008039
 8008024:	08008039 	.word	0x08008039
 8008028:	08008039 	.word	0x08008039
 800802c:	08008039 	.word	0x08008039
 8008030:	08008039 	.word	0x08008039
 8008034:	08008039 	.word	0x08008039
 8008038:	bf00      	nop
 800803a:	2300      	movs	r3, #0
 800803c:	4618      	mov	r0, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <CDC_Receive_FS>:
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	4812      	ldr	r0, [pc, #72]	; (80080a0 <CDC_Receive_FS+0x58>)
 8008056:	f7fe fbc1 	bl	80067dc <USBD_CDC_SetRxBuffer>
 800805a:	4811      	ldr	r0, [pc, #68]	; (80080a0 <CDC_Receive_FS+0x58>)
 800805c:	f7fe fc22 	bl	80068a4 <USBD_CDC_ReceivePacket>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	b29b      	uxth	r3, r3
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f81d 	bl	80080a8 <CDC_Transmit_FS>
 800806e:	2240      	movs	r2, #64	; 0x40
 8008070:	2100      	movs	r1, #0
 8008072:	480c      	ldr	r0, [pc, #48]	; (80080a4 <CDC_Receive_FS+0x5c>)
 8008074:	f000 fc6a 	bl	800894c <memset>
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	73fb      	strb	r3, [r7, #15]
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	461a      	mov	r2, r3
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	4807      	ldr	r0, [pc, #28]	; (80080a4 <CDC_Receive_FS+0x5c>)
 8008086:	f000 fc8d 	bl	80089a4 <memcpy>
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	461a      	mov	r2, r3
 800808e:	2100      	movs	r1, #0
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fc5b 	bl	800894c <memset>
 8008096:	2300      	movs	r3, #0
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	2000020c 	.word	0x2000020c
 80080a4:	20000128 	.word	0x20000128

080080a8 <CDC_Transmit_FS>:
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	807b      	strh	r3, [r7, #2]
 80080b4:	2300      	movs	r3, #0
 80080b6:	73fb      	strb	r3, [r7, #15]
 80080b8:	4b0d      	ldr	r3, [pc, #52]	; (80080f0 <CDC_Transmit_FS+0x48>)
 80080ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080be:	60bb      	str	r3, [r7, #8]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <CDC_Transmit_FS+0x26>
 80080ca:	2301      	movs	r3, #1
 80080cc:	e00b      	b.n	80080e6 <CDC_Transmit_FS+0x3e>
 80080ce:	887b      	ldrh	r3, [r7, #2]
 80080d0:	461a      	mov	r2, r3
 80080d2:	6879      	ldr	r1, [r7, #4]
 80080d4:	4806      	ldr	r0, [pc, #24]	; (80080f0 <CDC_Transmit_FS+0x48>)
 80080d6:	f7fe fb5f 	bl	8006798 <USBD_CDC_SetTxBuffer>
 80080da:	4805      	ldr	r0, [pc, #20]	; (80080f0 <CDC_Transmit_FS+0x48>)
 80080dc:	f7fe fb9c 	bl	8006818 <USBD_CDC_TransmitPacket>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73fb      	strb	r3, [r7, #15]
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	2000020c 	.word	0x2000020c

080080f4 <CDC_TransmitCplt_FS>:
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	4613      	mov	r3, r2
 8008100:	71fb      	strb	r3, [r7, #7]
 8008102:	2300      	movs	r3, #0
 8008104:	75fb      	strb	r3, [r7, #23]
 8008106:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800810a:	4618      	mov	r0, r3
 800810c:	371c      	adds	r7, #28
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
	...

08008118 <USBD_FS_DeviceDescriptor>:
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	4603      	mov	r3, r0
 8008120:	6039      	str	r1, [r7, #0]
 8008122:	71fb      	strb	r3, [r7, #7]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	2212      	movs	r2, #18
 8008128:	801a      	strh	r2, [r3, #0]
 800812a:	4b03      	ldr	r3, [pc, #12]	; (8008138 <USBD_FS_DeviceDescriptor+0x20>)
 800812c:	4618      	mov	r0, r3
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	200000d8 	.word	0x200000d8

0800813c <USBD_FS_LangIDStrDescriptor>:
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	4603      	mov	r3, r0
 8008144:	6039      	str	r1, [r7, #0]
 8008146:	71fb      	strb	r3, [r7, #7]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2204      	movs	r2, #4
 800814c:	801a      	strh	r2, [r3, #0]
 800814e:	4b03      	ldr	r3, [pc, #12]	; (800815c <USBD_FS_LangIDStrDescriptor+0x20>)
 8008150:	4618      	mov	r0, r3
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	200000ec 	.word	0x200000ec

08008160 <USBD_FS_ProductStrDescriptor>:
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	4603      	mov	r3, r0
 8008168:	6039      	str	r1, [r7, #0]
 800816a:	71fb      	strb	r3, [r7, #7]
 800816c:	79fb      	ldrb	r3, [r7, #7]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d105      	bne.n	800817e <USBD_FS_ProductStrDescriptor+0x1e>
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	4907      	ldr	r1, [pc, #28]	; (8008194 <USBD_FS_ProductStrDescriptor+0x34>)
 8008176:	4808      	ldr	r0, [pc, #32]	; (8008198 <USBD_FS_ProductStrDescriptor+0x38>)
 8008178:	f7ff fddc 	bl	8007d34 <USBD_GetString>
 800817c:	e004      	b.n	8008188 <USBD_FS_ProductStrDescriptor+0x28>
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	4904      	ldr	r1, [pc, #16]	; (8008194 <USBD_FS_ProductStrDescriptor+0x34>)
 8008182:	4805      	ldr	r0, [pc, #20]	; (8008198 <USBD_FS_ProductStrDescriptor+0x38>)
 8008184:	f7ff fdd6 	bl	8007d34 <USBD_GetString>
 8008188:	4b02      	ldr	r3, [pc, #8]	; (8008194 <USBD_FS_ProductStrDescriptor+0x34>)
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	200014e8 	.word	0x200014e8
 8008198:	08008a1c 	.word	0x08008a1c

0800819c <USBD_FS_ManufacturerStrDescriptor>:
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	4603      	mov	r3, r0
 80081a4:	6039      	str	r1, [r7, #0]
 80081a6:	71fb      	strb	r3, [r7, #7]
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	4904      	ldr	r1, [pc, #16]	; (80081bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80081ac:	4804      	ldr	r0, [pc, #16]	; (80081c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80081ae:	f7ff fdc1 	bl	8007d34 <USBD_GetString>
 80081b2:	4b02      	ldr	r3, [pc, #8]	; (80081bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80081b4:	4618      	mov	r0, r3
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	200014e8 	.word	0x200014e8
 80081c0:	08008a34 	.word	0x08008a34

080081c4 <USBD_FS_SerialStrDescriptor>:
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	4603      	mov	r3, r0
 80081cc:	6039      	str	r1, [r7, #0]
 80081ce:	71fb      	strb	r3, [r7, #7]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	221a      	movs	r2, #26
 80081d4:	801a      	strh	r2, [r3, #0]
 80081d6:	f000 f843 	bl	8008260 <Get_SerialNum>
 80081da:	4b02      	ldr	r3, [pc, #8]	; (80081e4 <USBD_FS_SerialStrDescriptor+0x20>)
 80081dc:	4618      	mov	r0, r3
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	200000f0 	.word	0x200000f0

080081e8 <USBD_FS_ConfigStrDescriptor>:
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	6039      	str	r1, [r7, #0]
 80081f2:	71fb      	strb	r3, [r7, #7]
 80081f4:	79fb      	ldrb	r3, [r7, #7]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d105      	bne.n	8008206 <USBD_FS_ConfigStrDescriptor+0x1e>
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	4907      	ldr	r1, [pc, #28]	; (800821c <USBD_FS_ConfigStrDescriptor+0x34>)
 80081fe:	4808      	ldr	r0, [pc, #32]	; (8008220 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008200:	f7ff fd98 	bl	8007d34 <USBD_GetString>
 8008204:	e004      	b.n	8008210 <USBD_FS_ConfigStrDescriptor+0x28>
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	4904      	ldr	r1, [pc, #16]	; (800821c <USBD_FS_ConfigStrDescriptor+0x34>)
 800820a:	4805      	ldr	r0, [pc, #20]	; (8008220 <USBD_FS_ConfigStrDescriptor+0x38>)
 800820c:	f7ff fd92 	bl	8007d34 <USBD_GetString>
 8008210:	4b02      	ldr	r3, [pc, #8]	; (800821c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	200014e8 	.word	0x200014e8
 8008220:	08008a48 	.word	0x08008a48

08008224 <USBD_FS_InterfaceStrDescriptor>:
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	4603      	mov	r3, r0
 800822c:	6039      	str	r1, [r7, #0]
 800822e:	71fb      	strb	r3, [r7, #7]
 8008230:	79fb      	ldrb	r3, [r7, #7]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d105      	bne.n	8008242 <USBD_FS_InterfaceStrDescriptor+0x1e>
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	4907      	ldr	r1, [pc, #28]	; (8008258 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800823a:	4808      	ldr	r0, [pc, #32]	; (800825c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800823c:	f7ff fd7a 	bl	8007d34 <USBD_GetString>
 8008240:	e004      	b.n	800824c <USBD_FS_InterfaceStrDescriptor+0x28>
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	4904      	ldr	r1, [pc, #16]	; (8008258 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008246:	4805      	ldr	r0, [pc, #20]	; (800825c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008248:	f7ff fd74 	bl	8007d34 <USBD_GetString>
 800824c:	4b02      	ldr	r3, [pc, #8]	; (8008258 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	200014e8 	.word	0x200014e8
 800825c:	08008a54 	.word	0x08008a54

08008260 <Get_SerialNum>:
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <Get_SerialNum+0x44>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	60fb      	str	r3, [r7, #12]
 800826c:	4b0e      	ldr	r3, [pc, #56]	; (80082a8 <Get_SerialNum+0x48>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	60bb      	str	r3, [r7, #8]
 8008272:	4b0e      	ldr	r3, [pc, #56]	; (80082ac <Get_SerialNum+0x4c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	607b      	str	r3, [r7, #4]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4413      	add	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d009      	beq.n	800829a <Get_SerialNum+0x3a>
 8008286:	2208      	movs	r2, #8
 8008288:	4909      	ldr	r1, [pc, #36]	; (80082b0 <Get_SerialNum+0x50>)
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 f814 	bl	80082b8 <IntToUnicode>
 8008290:	2204      	movs	r2, #4
 8008292:	4908      	ldr	r1, [pc, #32]	; (80082b4 <Get_SerialNum+0x54>)
 8008294:	68b8      	ldr	r0, [r7, #8]
 8008296:	f000 f80f 	bl	80082b8 <IntToUnicode>
 800829a:	bf00      	nop
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	1fff7a10 	.word	0x1fff7a10
 80082a8:	1fff7a14 	.word	0x1fff7a14
 80082ac:	1fff7a18 	.word	0x1fff7a18
 80082b0:	200000f2 	.word	0x200000f2
 80082b4:	20000102 	.word	0x20000102

080082b8 <IntToUnicode>:
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	71fb      	strb	r3, [r7, #7]
 80082c6:	2300      	movs	r3, #0
 80082c8:	75fb      	strb	r3, [r7, #23]
 80082ca:	2300      	movs	r3, #0
 80082cc:	75fb      	strb	r3, [r7, #23]
 80082ce:	e027      	b.n	8008320 <IntToUnicode+0x68>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	0f1b      	lsrs	r3, r3, #28
 80082d4:	2b09      	cmp	r3, #9
 80082d6:	d80b      	bhi.n	80082f0 <IntToUnicode+0x38>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	0f1b      	lsrs	r3, r3, #28
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	4619      	mov	r1, r3
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	440b      	add	r3, r1
 80082e8:	3230      	adds	r2, #48	; 0x30
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	701a      	strb	r2, [r3, #0]
 80082ee:	e00a      	b.n	8008306 <IntToUnicode+0x4e>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	0f1b      	lsrs	r3, r3, #28
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	7dfb      	ldrb	r3, [r7, #23]
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	4619      	mov	r1, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	440b      	add	r3, r1
 8008300:	3237      	adds	r2, #55	; 0x37
 8008302:	b2d2      	uxtb	r2, r2
 8008304:	701a      	strb	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	011b      	lsls	r3, r3, #4
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	3301      	adds	r3, #1
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	4413      	add	r3, r2
 8008316:	2200      	movs	r2, #0
 8008318:	701a      	strb	r2, [r3, #0]
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	3301      	adds	r3, #1
 800831e:	75fb      	strb	r3, [r7, #23]
 8008320:	7dfa      	ldrb	r2, [r7, #23]
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	429a      	cmp	r2, r3
 8008326:	d3d3      	bcc.n	80082d0 <IntToUnicode+0x18>
 8008328:	bf00      	nop
 800832a:	bf00      	nop
 800832c:	371c      	adds	r7, #28
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
	...

08008338 <HAL_PCD_MspInit>:
 8008338:	b580      	push	{r7, lr}
 800833a:	b08a      	sub	sp, #40	; 0x28
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	f107 0314 	add.w	r3, r7, #20
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	605a      	str	r2, [r3, #4]
 800834a:	609a      	str	r2, [r3, #8]
 800834c:	60da      	str	r2, [r3, #12]
 800834e:	611a      	str	r2, [r3, #16]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008358:	d13a      	bne.n	80083d0 <HAL_PCD_MspInit+0x98>
 800835a:	2300      	movs	r3, #0
 800835c:	613b      	str	r3, [r7, #16]
 800835e:	4b1e      	ldr	r3, [pc, #120]	; (80083d8 <HAL_PCD_MspInit+0xa0>)
 8008360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008362:	4a1d      	ldr	r2, [pc, #116]	; (80083d8 <HAL_PCD_MspInit+0xa0>)
 8008364:	f043 0301 	orr.w	r3, r3, #1
 8008368:	6313      	str	r3, [r2, #48]	; 0x30
 800836a:	4b1b      	ldr	r3, [pc, #108]	; (80083d8 <HAL_PCD_MspInit+0xa0>)
 800836c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	613b      	str	r3, [r7, #16]
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800837a:	617b      	str	r3, [r7, #20]
 800837c:	2302      	movs	r3, #2
 800837e:	61bb      	str	r3, [r7, #24]
 8008380:	2300      	movs	r3, #0
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	2303      	movs	r3, #3
 8008386:	623b      	str	r3, [r7, #32]
 8008388:	230a      	movs	r3, #10
 800838a:	627b      	str	r3, [r7, #36]	; 0x24
 800838c:	f107 0314 	add.w	r3, r7, #20
 8008390:	4619      	mov	r1, r3
 8008392:	4812      	ldr	r0, [pc, #72]	; (80083dc <HAL_PCD_MspInit+0xa4>)
 8008394:	f7f8 fe92 	bl	80010bc <HAL_GPIO_Init>
 8008398:	4b0f      	ldr	r3, [pc, #60]	; (80083d8 <HAL_PCD_MspInit+0xa0>)
 800839a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839c:	4a0e      	ldr	r2, [pc, #56]	; (80083d8 <HAL_PCD_MspInit+0xa0>)
 800839e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a2:	6353      	str	r3, [r2, #52]	; 0x34
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	4b0b      	ldr	r3, [pc, #44]	; (80083d8 <HAL_PCD_MspInit+0xa0>)
 80083aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ac:	4a0a      	ldr	r2, [pc, #40]	; (80083d8 <HAL_PCD_MspInit+0xa0>)
 80083ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083b2:	6453      	str	r3, [r2, #68]	; 0x44
 80083b4:	4b08      	ldr	r3, [pc, #32]	; (80083d8 <HAL_PCD_MspInit+0xa0>)
 80083b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	2100      	movs	r1, #0
 80083c4:	2043      	movs	r0, #67	; 0x43
 80083c6:	f7f8 fe42 	bl	800104e <HAL_NVIC_SetPriority>
 80083ca:	2043      	movs	r0, #67	; 0x43
 80083cc:	f7f8 fe5b 	bl	8001086 <HAL_NVIC_EnableIRQ>
 80083d0:	bf00      	nop
 80083d2:	3728      	adds	r7, #40	; 0x28
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	40023800 	.word	0x40023800
 80083dc:	40020000 	.word	0x40020000

080083e0 <HAL_PCD_SetupStageCallback>:
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80083f4:	4619      	mov	r1, r3
 80083f6:	4610      	mov	r0, r2
 80083f8:	f7fe fb3d 	bl	8006a76 <USBD_LL_SetupStage>
 80083fc:	bf00      	nop
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <HAL_PCD_DataOutStageCallback>:
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	70fb      	strb	r3, [r7, #3]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008416:	78fa      	ldrb	r2, [r7, #3]
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	4613      	mov	r3, r2
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	78fb      	ldrb	r3, [r7, #3]
 800842c:	4619      	mov	r1, r3
 800842e:	f7fe fb77 	bl	8006b20 <USBD_LL_DataOutStage>
 8008432:	bf00      	nop
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <HAL_PCD_DataInStageCallback>:
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	460b      	mov	r3, r1
 8008444:	70fb      	strb	r3, [r7, #3]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800844c:	78fa      	ldrb	r2, [r7, #3]
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	4613      	mov	r3, r2
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	4413      	add	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	334c      	adds	r3, #76	; 0x4c
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	4619      	mov	r1, r3
 8008462:	f7fe fc10 	bl	8006c86 <USBD_LL_DataInStage>
 8008466:	bf00      	nop
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <HAL_PCD_SOFCallback>:
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800847c:	4618      	mov	r0, r3
 800847e:	f7fe fd44 	bl	8006f0a <USBD_LL_SOF>
 8008482:	bf00      	nop
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_PCD_ResetCallback>:
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	2301      	movs	r3, #1
 8008494:	73fb      	strb	r3, [r7, #15]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	2b02      	cmp	r3, #2
 800849c:	d001      	beq.n	80084a2 <HAL_PCD_ResetCallback+0x18>
 800849e:	f7f8 fb27 	bl	8000af0 <Error_Handler>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084a8:	7bfa      	ldrb	r2, [r7, #15]
 80084aa:	4611      	mov	r1, r2
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fe fcee 	bl	8006e8e <USBD_LL_SetSpeed>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fe fc96 	bl	8006dea <USBD_LL_Reset>
 80084be:	bf00      	nop
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <HAL_PCD_SuspendCallback>:
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe fce9 	bl	8006eae <USBD_LL_Suspend>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80084ee:	f043 0301 	orr.w	r3, r3, #1
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d005      	beq.n	8008508 <HAL_PCD_SuspendCallback+0x40>
 80084fc:	4b04      	ldr	r3, [pc, #16]	; (8008510 <HAL_PCD_SuspendCallback+0x48>)
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	4a03      	ldr	r2, [pc, #12]	; (8008510 <HAL_PCD_SuspendCallback+0x48>)
 8008502:	f043 0306 	orr.w	r3, r3, #6
 8008506:	6113      	str	r3, [r2, #16]
 8008508:	bf00      	nop
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	e000ed00 	.word	0xe000ed00

08008514 <HAL_PCD_ResumeCallback>:
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008522:	4618      	mov	r0, r3
 8008524:	f7fe fcd9 	bl	8006eda <USBD_LL_Resume>
 8008528:	bf00      	nop
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_PCD_ISOOUTIncompleteCallback>:
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008542:	78fa      	ldrb	r2, [r7, #3]
 8008544:	4611      	mov	r1, r2
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe fd31 	bl	8006fae <USBD_LL_IsoOUTIncomplete>
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_PCD_ISOINIncompleteCallback>:
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008566:	78fa      	ldrb	r2, [r7, #3]
 8008568:	4611      	mov	r1, r2
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fced 	bl	8006f4a <USBD_LL_IsoINIncomplete>
 8008570:	bf00      	nop
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <HAL_PCD_ConnectCallback>:
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe fd43 	bl	8007012 <USBD_LL_DevConnected>
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_PCD_DisconnectCallback>:
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fd40 	bl	8007028 <USBD_LL_DevDisconnected>
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_LL_Init>:
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d13c      	bne.n	800863a <USBD_LL_Init+0x8a>
 80085c0:	4a20      	ldr	r2, [pc, #128]	; (8008644 <USBD_LL_Init+0x94>)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a1e      	ldr	r2, [pc, #120]	; (8008644 <USBD_LL_Init+0x94>)
 80085cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 80085d0:	4b1c      	ldr	r3, [pc, #112]	; (8008644 <USBD_LL_Init+0x94>)
 80085d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	4b1a      	ldr	r3, [pc, #104]	; (8008644 <USBD_LL_Init+0x94>)
 80085da:	2204      	movs	r2, #4
 80085dc:	605a      	str	r2, [r3, #4]
 80085de:	4b19      	ldr	r3, [pc, #100]	; (8008644 <USBD_LL_Init+0x94>)
 80085e0:	2202      	movs	r2, #2
 80085e2:	60da      	str	r2, [r3, #12]
 80085e4:	4b17      	ldr	r3, [pc, #92]	; (8008644 <USBD_LL_Init+0x94>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	611a      	str	r2, [r3, #16]
 80085ea:	4b16      	ldr	r3, [pc, #88]	; (8008644 <USBD_LL_Init+0x94>)
 80085ec:	2202      	movs	r2, #2
 80085ee:	619a      	str	r2, [r3, #24]
 80085f0:	4b14      	ldr	r3, [pc, #80]	; (8008644 <USBD_LL_Init+0x94>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	61da      	str	r2, [r3, #28]
 80085f6:	4b13      	ldr	r3, [pc, #76]	; (8008644 <USBD_LL_Init+0x94>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	621a      	str	r2, [r3, #32]
 80085fc:	4b11      	ldr	r3, [pc, #68]	; (8008644 <USBD_LL_Init+0x94>)
 80085fe:	2200      	movs	r2, #0
 8008600:	625a      	str	r2, [r3, #36]	; 0x24
 8008602:	4b10      	ldr	r3, [pc, #64]	; (8008644 <USBD_LL_Init+0x94>)
 8008604:	2200      	movs	r2, #0
 8008606:	62da      	str	r2, [r3, #44]	; 0x2c
 8008608:	4b0e      	ldr	r3, [pc, #56]	; (8008644 <USBD_LL_Init+0x94>)
 800860a:	2200      	movs	r2, #0
 800860c:	631a      	str	r2, [r3, #48]	; 0x30
 800860e:	480d      	ldr	r0, [pc, #52]	; (8008644 <USBD_LL_Init+0x94>)
 8008610:	f7f9 fb3d 	bl	8001c8e <HAL_PCD_Init>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <USBD_LL_Init+0x6e>
 800861a:	f7f8 fa69 	bl	8000af0 <Error_Handler>
 800861e:	2180      	movs	r1, #128	; 0x80
 8008620:	4808      	ldr	r0, [pc, #32]	; (8008644 <USBD_LL_Init+0x94>)
 8008622:	f7fa fd94 	bl	800314e <HAL_PCDEx_SetRxFiFo>
 8008626:	2240      	movs	r2, #64	; 0x40
 8008628:	2100      	movs	r1, #0
 800862a:	4806      	ldr	r0, [pc, #24]	; (8008644 <USBD_LL_Init+0x94>)
 800862c:	f7fa fd48 	bl	80030c0 <HAL_PCDEx_SetTxFiFo>
 8008630:	2280      	movs	r2, #128	; 0x80
 8008632:	2101      	movs	r1, #1
 8008634:	4803      	ldr	r0, [pc, #12]	; (8008644 <USBD_LL_Init+0x94>)
 8008636:	f7fa fd43 	bl	80030c0 <HAL_PCDEx_SetTxFiFo>
 800863a:	2300      	movs	r3, #0
 800863c:	4618      	mov	r0, r3
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	200016e8 	.word	0x200016e8

08008648 <USBD_LL_Start>:
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	2300      	movs	r3, #0
 8008652:	73fb      	strb	r3, [r7, #15]
 8008654:	2300      	movs	r3, #0
 8008656:	73bb      	strb	r3, [r7, #14]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800865e:	4618      	mov	r0, r3
 8008660:	f7f9 fc32 	bl	8001ec8 <HAL_PCD_Start>
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]
 8008668:	7bfb      	ldrb	r3, [r7, #15]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f942 	bl	80088f4 <USBD_Get_USB_Status>
 8008670:	4603      	mov	r3, r0
 8008672:	73bb      	strb	r3, [r7, #14]
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_LL_OpenEP>:
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	4608      	mov	r0, r1
 8008688:	4611      	mov	r1, r2
 800868a:	461a      	mov	r2, r3
 800868c:	4603      	mov	r3, r0
 800868e:	70fb      	strb	r3, [r7, #3]
 8008690:	460b      	mov	r3, r1
 8008692:	70bb      	strb	r3, [r7, #2]
 8008694:	4613      	mov	r3, r2
 8008696:	803b      	strh	r3, [r7, #0]
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]
 800869c:	2300      	movs	r3, #0
 800869e:	73bb      	strb	r3, [r7, #14]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80086a6:	78bb      	ldrb	r3, [r7, #2]
 80086a8:	883a      	ldrh	r2, [r7, #0]
 80086aa:	78f9      	ldrb	r1, [r7, #3]
 80086ac:	f7fa f903 	bl	80028b6 <HAL_PCD_EP_Open>
 80086b0:	4603      	mov	r3, r0
 80086b2:	73fb      	strb	r3, [r7, #15]
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 f91c 	bl	80088f4 <USBD_Get_USB_Status>
 80086bc:	4603      	mov	r3, r0
 80086be:	73bb      	strb	r3, [r7, #14]
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <USBD_LL_CloseEP>:
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	460b      	mov	r3, r1
 80086d4:	70fb      	strb	r3, [r7, #3]
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]
 80086da:	2300      	movs	r3, #0
 80086dc:	73bb      	strb	r3, [r7, #14]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086e4:	78fa      	ldrb	r2, [r7, #3]
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fa f94c 	bl	8002986 <HAL_PCD_EP_Close>
 80086ee:	4603      	mov	r3, r0
 80086f0:	73fb      	strb	r3, [r7, #15]
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 f8fd 	bl	80088f4 <USBD_Get_USB_Status>
 80086fa:	4603      	mov	r3, r0
 80086fc:	73bb      	strb	r3, [r7, #14]
 80086fe:	7bbb      	ldrb	r3, [r7, #14]
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBD_LL_StallEP>:
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
 8008718:	2300      	movs	r3, #0
 800871a:	73bb      	strb	r3, [r7, #14]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008722:	78fa      	ldrb	r2, [r7, #3]
 8008724:	4611      	mov	r1, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f7fa fa24 	bl	8002b74 <HAL_PCD_EP_SetStall>
 800872c:	4603      	mov	r3, r0
 800872e:	73fb      	strb	r3, [r7, #15]
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	4618      	mov	r0, r3
 8008734:	f000 f8de 	bl	80088f4 <USBD_Get_USB_Status>
 8008738:	4603      	mov	r3, r0
 800873a:	73bb      	strb	r3, [r7, #14]
 800873c:	7bbb      	ldrb	r3, [r7, #14]
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBD_LL_ClearStallEP>:
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	460b      	mov	r3, r1
 8008750:	70fb      	strb	r3, [r7, #3]
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
 8008756:	2300      	movs	r3, #0
 8008758:	73bb      	strb	r3, [r7, #14]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008760:	78fa      	ldrb	r2, [r7, #3]
 8008762:	4611      	mov	r1, r2
 8008764:	4618      	mov	r0, r3
 8008766:	f7fa fa69 	bl	8002c3c <HAL_PCD_EP_ClrStall>
 800876a:	4603      	mov	r3, r0
 800876c:	73fb      	strb	r3, [r7, #15]
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f8bf 	bl	80088f4 <USBD_Get_USB_Status>
 8008776:	4603      	mov	r3, r0
 8008778:	73bb      	strb	r3, [r7, #14]
 800877a:	7bbb      	ldrb	r3, [r7, #14]
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBD_LL_IsStallEP>:
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800879c:	2b00      	cmp	r3, #0
 800879e:	da0b      	bge.n	80087b8 <USBD_LL_IsStallEP+0x34>
 80087a0:	78fb      	ldrb	r3, [r7, #3]
 80087a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087a6:	68f9      	ldr	r1, [r7, #12]
 80087a8:	4613      	mov	r3, r2
 80087aa:	00db      	lsls	r3, r3, #3
 80087ac:	4413      	add	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	333e      	adds	r3, #62	; 0x3e
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	e00b      	b.n	80087d0 <USBD_LL_IsStallEP+0x4c>
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087be:	68f9      	ldr	r1, [r7, #12]
 80087c0:	4613      	mov	r3, r2
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	440b      	add	r3, r1
 80087ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USBD_LL_SetUSBAddress>:
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	70fb      	strb	r3, [r7, #3]
 80087e8:	2300      	movs	r3, #0
 80087ea:	73fb      	strb	r3, [r7, #15]
 80087ec:	2300      	movs	r3, #0
 80087ee:	73bb      	strb	r3, [r7, #14]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087f6:	78fa      	ldrb	r2, [r7, #3]
 80087f8:	4611      	mov	r1, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fa f836 	bl	800286c <HAL_PCD_SetAddress>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f874 	bl	80088f4 <USBD_Get_USB_Status>
 800880c:	4603      	mov	r3, r0
 800880e:	73bb      	strb	r3, [r7, #14]
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_LL_Transmit>:
 800881a:	b580      	push	{r7, lr}
 800881c:	b086      	sub	sp, #24
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	607a      	str	r2, [r7, #4]
 8008824:	603b      	str	r3, [r7, #0]
 8008826:	460b      	mov	r3, r1
 8008828:	72fb      	strb	r3, [r7, #11]
 800882a:	2300      	movs	r3, #0
 800882c:	75fb      	strb	r3, [r7, #23]
 800882e:	2300      	movs	r3, #0
 8008830:	75bb      	strb	r3, [r7, #22]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008838:	7af9      	ldrb	r1, [r7, #11]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	f7fa f94f 	bl	8002ae0 <HAL_PCD_EP_Transmit>
 8008842:	4603      	mov	r3, r0
 8008844:	75fb      	strb	r3, [r7, #23]
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	4618      	mov	r0, r3
 800884a:	f000 f853 	bl	80088f4 <USBD_Get_USB_Status>
 800884e:	4603      	mov	r3, r0
 8008850:	75bb      	strb	r3, [r7, #22]
 8008852:	7dbb      	ldrb	r3, [r7, #22]
 8008854:	4618      	mov	r0, r3
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_LL_PrepareReceive>:
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	607a      	str	r2, [r7, #4]
 8008866:	603b      	str	r3, [r7, #0]
 8008868:	460b      	mov	r3, r1
 800886a:	72fb      	strb	r3, [r7, #11]
 800886c:	2300      	movs	r3, #0
 800886e:	75fb      	strb	r3, [r7, #23]
 8008870:	2300      	movs	r3, #0
 8008872:	75bb      	strb	r3, [r7, #22]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800887a:	7af9      	ldrb	r1, [r7, #11]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	f7fa f8cb 	bl	8002a1a <HAL_PCD_EP_Receive>
 8008884:	4603      	mov	r3, r0
 8008886:	75fb      	strb	r3, [r7, #23]
 8008888:	7dfb      	ldrb	r3, [r7, #23]
 800888a:	4618      	mov	r0, r3
 800888c:	f000 f832 	bl	80088f4 <USBD_Get_USB_Status>
 8008890:	4603      	mov	r3, r0
 8008892:	75bb      	strb	r3, [r7, #22]
 8008894:	7dbb      	ldrb	r3, [r7, #22]
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <USBD_LL_GetRxDataSize>:
 800889e:	b580      	push	{r7, lr}
 80088a0:	b082      	sub	sp, #8
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	460b      	mov	r3, r1
 80088a8:	70fb      	strb	r3, [r7, #3]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088b0:	78fa      	ldrb	r2, [r7, #3]
 80088b2:	4611      	mov	r1, r2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fa f8fb 	bl	8002ab0 <HAL_PCD_EP_GetRxCount>
 80088ba:	4603      	mov	r3, r0
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBD_static_malloc>:
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	4b03      	ldr	r3, [pc, #12]	; (80088dc <USBD_static_malloc+0x18>)
 80088ce:	4618      	mov	r0, r3
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	20001bf4 	.word	0x20001bf4

080088e0 <USBD_static_free>:
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <USBD_Get_USB_Status>:
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	71fb      	strb	r3, [r7, #7]
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	2b03      	cmp	r3, #3
 8008906:	d817      	bhi.n	8008938 <USBD_Get_USB_Status+0x44>
 8008908:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <USBD_Get_USB_Status+0x1c>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	08008921 	.word	0x08008921
 8008914:	08008927 	.word	0x08008927
 8008918:	0800892d 	.word	0x0800892d
 800891c:	08008933 	.word	0x08008933
 8008920:	2300      	movs	r3, #0
 8008922:	73fb      	strb	r3, [r7, #15]
 8008924:	e00b      	b.n	800893e <USBD_Get_USB_Status+0x4a>
 8008926:	2303      	movs	r3, #3
 8008928:	73fb      	strb	r3, [r7, #15]
 800892a:	e008      	b.n	800893e <USBD_Get_USB_Status+0x4a>
 800892c:	2301      	movs	r3, #1
 800892e:	73fb      	strb	r3, [r7, #15]
 8008930:	e005      	b.n	800893e <USBD_Get_USB_Status+0x4a>
 8008932:	2303      	movs	r3, #3
 8008934:	73fb      	strb	r3, [r7, #15]
 8008936:	e002      	b.n	800893e <USBD_Get_USB_Status+0x4a>
 8008938:	2303      	movs	r3, #3
 800893a:	73fb      	strb	r3, [r7, #15]
 800893c:	bf00      	nop
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <memset>:
 800894c:	4402      	add	r2, r0
 800894e:	4603      	mov	r3, r0
 8008950:	4293      	cmp	r3, r2
 8008952:	d100      	bne.n	8008956 <memset+0xa>
 8008954:	4770      	bx	lr
 8008956:	f803 1b01 	strb.w	r1, [r3], #1
 800895a:	e7f9      	b.n	8008950 <memset+0x4>

0800895c <__libc_init_array>:
 800895c:	b570      	push	{r4, r5, r6, lr}
 800895e:	4d0d      	ldr	r5, [pc, #52]	; (8008994 <__libc_init_array+0x38>)
 8008960:	4c0d      	ldr	r4, [pc, #52]	; (8008998 <__libc_init_array+0x3c>)
 8008962:	1b64      	subs	r4, r4, r5
 8008964:	10a4      	asrs	r4, r4, #2
 8008966:	2600      	movs	r6, #0
 8008968:	42a6      	cmp	r6, r4
 800896a:	d109      	bne.n	8008980 <__libc_init_array+0x24>
 800896c:	4d0b      	ldr	r5, [pc, #44]	; (800899c <__libc_init_array+0x40>)
 800896e:	4c0c      	ldr	r4, [pc, #48]	; (80089a0 <__libc_init_array+0x44>)
 8008970:	f000 f826 	bl	80089c0 <_init>
 8008974:	1b64      	subs	r4, r4, r5
 8008976:	10a4      	asrs	r4, r4, #2
 8008978:	2600      	movs	r6, #0
 800897a:	42a6      	cmp	r6, r4
 800897c:	d105      	bne.n	800898a <__libc_init_array+0x2e>
 800897e:	bd70      	pop	{r4, r5, r6, pc}
 8008980:	f855 3b04 	ldr.w	r3, [r5], #4
 8008984:	4798      	blx	r3
 8008986:	3601      	adds	r6, #1
 8008988:	e7ee      	b.n	8008968 <__libc_init_array+0xc>
 800898a:	f855 3b04 	ldr.w	r3, [r5], #4
 800898e:	4798      	blx	r3
 8008990:	3601      	adds	r6, #1
 8008992:	e7f2      	b.n	800897a <__libc_init_array+0x1e>
 8008994:	08008a84 	.word	0x08008a84
 8008998:	08008a84 	.word	0x08008a84
 800899c:	08008a84 	.word	0x08008a84
 80089a0:	08008a88 	.word	0x08008a88

080089a4 <memcpy>:
 80089a4:	440a      	add	r2, r1
 80089a6:	4291      	cmp	r1, r2
 80089a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089ac:	d100      	bne.n	80089b0 <memcpy+0xc>
 80089ae:	4770      	bx	lr
 80089b0:	b510      	push	{r4, lr}
 80089b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ba:	4291      	cmp	r1, r2
 80089bc:	d1f9      	bne.n	80089b2 <memcpy+0xe>
 80089be:	bd10      	pop	{r4, pc}

080089c0 <_init>:
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c2:	bf00      	nop
 80089c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c6:	bc08      	pop	{r3}
 80089c8:	469e      	mov	lr, r3
 80089ca:	4770      	bx	lr

080089cc <_fini>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	bf00      	nop
 80089d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d2:	bc08      	pop	{r3}
 80089d4:	469e      	mov	lr, r3
 80089d6:	4770      	bx	lr
